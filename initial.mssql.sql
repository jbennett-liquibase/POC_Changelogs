-- liquibase formatted sql

-- changeset JamesBennett:1727463743285-1
CREATE TABLE Person.BusinessEntityContact (BusinessEntityID int NOT NULL, PersonID int NOT NULL, ContactTypeID int NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_BusinessEntityContact_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_BusinessEntityContact_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID PRIMARY KEY (BusinessEntityID, PersonID, ContactTypeID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityContact') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping stores, vendors, and employees to people' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping stores, vendors, and employees to people' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityContact') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Person.BusinessEntityContact')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to BusinessEntity.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to BusinessEntity.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityContact') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PersonID' AND object_id = OBJECT_ID('Person.BusinessEntityContact')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Person.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' , @level2type = N'COLUMN' , @level2name = N'PersonID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Person.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' , @level2type = N'COLUMN' , @level2name = N'PersonID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityContact') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ContactTypeID' AND object_id = OBJECT_ID('Person.BusinessEntityContact')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key.  Foreign key to ContactType.ContactTypeID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' , @level2type = N'COLUMN' , @level2name = N'ContactTypeID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key.  Foreign key to ContactType.ContactTypeID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' , @level2type = N'COLUMN' , @level2name = N'ContactTypeID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityContact') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Person.BusinessEntityContact')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityContact') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.BusinessEntityContact')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityContact' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-2
CREATE TABLE Person.ContactType (ContactTypeID int IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, ModifiedDate datetime CONSTRAINT DF_ContactType_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ContactType_ContactTypeID PRIMARY KEY (ContactTypeID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.ContactType') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Lookup table containing the types of business entity contacts.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'ContactType' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Lookup table containing the types of business entity contacts.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'ContactType' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.ContactType') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ContactTypeID' AND object_id = OBJECT_ID('Person.ContactType')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for ContactType records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'ContactType' , @level2type = N'COLUMN' , @level2name = N'ContactTypeID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for ContactType records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'ContactType' , @level2type = N'COLUMN' , @level2name = N'ContactTypeID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.ContactType') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Person.ContactType')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Contact type description.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'ContactType' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Contact type description.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'ContactType' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.ContactType') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.ContactType')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'ContactType' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'ContactType' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-3
CREATE TABLE Sales.Customer (CustomerID int IDENTITY (1, 1) NOT NULL, PersonID int, StoreID int, TerritoryID int, AccountNumber varchar(10) NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_Customer_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_Customer_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Customer_CustomerID PRIMARY KEY (CustomerID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Customer') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Current customer information. Also see the Person and Store tables.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Current customer information. Also see the Person and Store tables.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Customer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CustomerID' AND object_id = OBJECT_ID('Sales.Customer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'CustomerID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'CustomerID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Customer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PersonID' AND object_id = OBJECT_ID('Sales.Customer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Foreign key to Person.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'PersonID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Foreign key to Person.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'PersonID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Customer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StoreID' AND object_id = OBJECT_ID('Sales.Customer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Foreign key to Store.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'StoreID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Foreign key to Store.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'StoreID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Customer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TerritoryID' AND object_id = OBJECT_ID('Sales.Customer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Customer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AccountNumber' AND object_id = OBJECT_ID('Sales.Customer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Unique number identifying the customer assigned by the accounting system.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'AccountNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Unique number identifying the customer assigned by the accounting system.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'AccountNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Customer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Sales.Customer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Customer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.Customer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Customer' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-4
CREATE TABLE HumanResources.Employee (BusinessEntityID int NOT NULL, NationalIDNumber nvarchar(15) NOT NULL, LoginID nvarchar(256) NOT NULL, OrganizationNode hierarchyid, OrganizationLevel smallint, JobTitle nvarchar(50) NOT NULL, BirthDate date NOT NULL, MaritalStatus nchar(1) NOT NULL, Gender nchar(1) NOT NULL, HireDate date NOT NULL, SalariedFlag Flag(1) CONSTRAINT DF_Employee_SalariedFlag DEFAULT 1 NOT NULL, VacationHours smallint CONSTRAINT DF_Employee_VacationHours DEFAULT 0 NOT NULL, SickLeaveHours smallint CONSTRAINT DF_Employee_SickLeaveHours DEFAULT 0 NOT NULL, CurrentFlag Flag(1) CONSTRAINT DF_Employee_CurrentFlag DEFAULT 1 NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_Employee_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_Employee_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Employee_BusinessEntityID PRIMARY KEY (BusinessEntityID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Employee information such as salary, department, and title.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Employee information such as salary, department, and title.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'NationalIDNumber' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Unique national identification number such as a social security number.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'NationalIDNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Unique national identification number such as a social security number.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'NationalIDNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'LoginID' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Network login.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'LoginID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Network login.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'LoginID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'OrganizationNode' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Where the employee is located in corporate hierarchy.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'OrganizationNode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Where the employee is located in corporate hierarchy.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'OrganizationNode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'OrganizationLevel' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'The depth of the employee in the corporate hierarchy.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'OrganizationLevel' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'The depth of the employee in the corporate hierarchy.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'OrganizationLevel' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'JobTitle' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Work title such as Buyer or Sales Representative.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'JobTitle' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Work title such as Buyer or Sales Representative.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'JobTitle' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BirthDate' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date of birth.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'BirthDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date of birth.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'BirthDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'MaritalStatus' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'M = Married, S = Single' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'MaritalStatus' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'M = Married, S = Single' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'MaritalStatus' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Gender' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'M = Male, F = Female' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'Gender' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'M = Male, F = Female' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'Gender' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'HireDate' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Employee hired on this date.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'HireDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Employee hired on this date.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'HireDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalariedFlag' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'SalariedFlag' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'SalariedFlag' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'VacationHours' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Number of available vacation hours.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'VacationHours' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Number of available vacation hours.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'VacationHours' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SickLeaveHours' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Number of available sick leave hours.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'SickLeaveHours' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Number of available sick leave hours.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'SickLeaveHours' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CurrentFlag' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'0 = Inactive, 1 = Active' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'CurrentFlag' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'0 = Inactive, 1 = Active' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'CurrentFlag' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Employee') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('HumanResources.Employee')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Employee' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-5
CREATE TABLE Person.Person (BusinessEntityID int NOT NULL, PersonType nchar(2) NOT NULL, NameStyle NameStyle(1) CONSTRAINT DF_Person_NameStyle DEFAULT 0 NOT NULL, Title nvarchar(8), FirstName Name NOT NULL, MiddleName Name, LastName Name NOT NULL, Suffix nvarchar(10), EmailPromotion int CONSTRAINT DF_Person_EmailPromotion DEFAULT 0 NOT NULL, AdditionalContactInfo xml, Demographics xml, rowguid uniqueidentifier CONSTRAINT DF_Person_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_Person_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Person_BusinessEntityID PRIMARY KEY (BusinessEntityID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for Person records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for Person records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PersonType' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'PersonType' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'PersonType' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'NameStyle' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'NameStyle' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'NameStyle' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Title' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'A courtesy title. For example, Mr. or Ms.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'Title' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'A courtesy title. For example, Mr. or Ms.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'Title' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'FirstName' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'First name of the person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'FirstName' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'First name of the person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'FirstName' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'MiddleName' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Middle name or middle initial of the person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'MiddleName' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Middle name or middle initial of the person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'MiddleName' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'LastName' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Last name of the person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'LastName' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Last name of the person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'LastName' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Suffix' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Surname suffix. For example, Sr. or Jr.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'Suffix' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Surname suffix. For example, Sr. or Jr.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'Suffix' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EmailPromotion' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'EmailPromotion' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'EmailPromotion' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AdditionalContactInfo' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Additional contact information about the person stored in xml format.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'AdditionalContactInfo' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Additional contact information about the person stored in xml format.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'AdditionalContactInfo' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Demographics' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'Demographics' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'Demographics' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Person') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.Person')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Person' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-6
CREATE TABLE Sales.Store (BusinessEntityID int NOT NULL, Name Name NOT NULL, SalesPersonID int, Demographics xml, rowguid uniqueidentifier CONSTRAINT DF_Store_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_Store_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Store_BusinessEntityID PRIMARY KEY (BusinessEntityID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Store') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Customers (resellers) of Adventure Works products.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Customers (resellers) of Adventure Works products.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Store') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Sales.Store')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Customer.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Customer.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Store') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Sales.Store')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Name of the store.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Name of the store.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Store') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesPersonID' AND object_id = OBJECT_ID('Sales.Store')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'SalesPersonID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'SalesPersonID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Store') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Demographics' AND object_id = OBJECT_ID('Sales.Store')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Demographic informationg about the store such as the number of employees, annual sales and store type.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'Demographics' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Demographic informationg about the store such as the number of employees, annual sales and store type.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'Demographics' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Store') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Sales.Store')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Store') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.Store')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Store' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-7
CREATE TABLE Purchasing.Vendor (BusinessEntityID int NOT NULL, AccountNumber AccountNumber NOT NULL, Name Name NOT NULL, CreditRating tinyint NOT NULL, PreferredVendorStatus Flag(1) CONSTRAINT DF_Vendor_PreferredVendorStatus DEFAULT 1 NOT NULL, ActiveFlag Flag(1) CONSTRAINT DF_Vendor_ActiveFlag DEFAULT 1 NOT NULL, PurchasingWebServiceURL nvarchar(1024), ModifiedDate datetime CONSTRAINT DF_Vendor_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Vendor_BusinessEntityID PRIMARY KEY (BusinessEntityID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.Vendor') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Companies from whom Adventure Works Cycles purchases parts or other goods.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Companies from whom Adventure Works Cycles purchases parts or other goods.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.Vendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Purchasing.Vendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.Vendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AccountNumber' AND object_id = OBJECT_ID('Purchasing.Vendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Vendor account (identification) number.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'AccountNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Vendor account (identification) number.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'AccountNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.Vendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Purchasing.Vendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Company name.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Company name.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.Vendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CreditRating' AND object_id = OBJECT_ID('Purchasing.Vendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'CreditRating' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'CreditRating' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.Vendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PreferredVendorStatus' AND object_id = OBJECT_ID('Purchasing.Vendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'PreferredVendorStatus' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'PreferredVendorStatus' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.Vendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ActiveFlag' AND object_id = OBJECT_ID('Purchasing.Vendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'0 = Vendor no longer used. 1 = Vendor is actively used.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'ActiveFlag' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'0 = Vendor no longer used. 1 = Vendor is actively used.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'ActiveFlag' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.Vendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PurchasingWebServiceURL' AND object_id = OBJECT_ID('Purchasing.Vendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Vendor URL.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'PurchasingWebServiceURL' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Vendor URL.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'PurchasingWebServiceURL' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.Vendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Purchasing.Vendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'Vendor' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-8
CREATE TABLE Production.Product (ProductID int IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, ProductNumber nvarchar(25) NOT NULL, MakeFlag Flag(1) CONSTRAINT DF_Product_MakeFlag DEFAULT 1 NOT NULL, FinishedGoodsFlag Flag(1) CONSTRAINT DF_Product_FinishedGoodsFlag DEFAULT 1 NOT NULL, Color nvarchar(15), SafetyStockLevel smallint NOT NULL, ReorderPoint smallint NOT NULL, StandardCost money NOT NULL, ListPrice money NOT NULL, Size nvarchar(5), SizeUnitMeasureCode nchar(3), WeightUnitMeasureCode nchar(3), Weight decimal(8, 2), DaysToManufacture int NOT NULL, ProductLine nchar(2), Class nchar(2), Style nchar(2), ProductSubcategoryID int, ProductModelID int, SellStartDate datetime NOT NULL, SellEndDate datetime, DiscontinuedDate datetime, rowguid uniqueidentifier CONSTRAINT DF_Product_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_Product_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Product_ProductID PRIMARY KEY (ProductID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Products sold or used in the manfacturing of sold products.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Products sold or used in the manfacturing of sold products.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for Product records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for Product records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Name of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Name of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductNumber' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Unique product identification number.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ProductNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Unique product identification number.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ProductNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'MakeFlag' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'0 = Product is purchased, 1 = Product is manufactured in-house.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'MakeFlag' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'0 = Product is purchased, 1 = Product is manufactured in-house.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'MakeFlag' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'FinishedGoodsFlag' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'0 = Product is not a salable item. 1 = Product is salable.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'FinishedGoodsFlag' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'0 = Product is not a salable item. 1 = Product is salable.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'FinishedGoodsFlag' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Color' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product color.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Color' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product color.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Color' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SafetyStockLevel' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Minimum inventory quantity.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'SafetyStockLevel' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Minimum inventory quantity.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'SafetyStockLevel' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ReorderPoint' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Inventory level that triggers a purchase order or work order.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ReorderPoint' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Inventory level that triggers a purchase order or work order.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ReorderPoint' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StandardCost' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Standard cost of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'StandardCost' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Standard cost of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'StandardCost' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ListPrice' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Selling price.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ListPrice' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Selling price.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ListPrice' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Size' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product size.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Size' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product size.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Size' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SizeUnitMeasureCode' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Unit of measure for Size column.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'SizeUnitMeasureCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Unit of measure for Size column.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'SizeUnitMeasureCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'WeightUnitMeasureCode' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Unit of measure for Weight column.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'WeightUnitMeasureCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Unit of measure for Weight column.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'WeightUnitMeasureCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Weight' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product weight.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Weight' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product weight.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Weight' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DaysToManufacture' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Number of days required to manufacture the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'DaysToManufacture' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Number of days required to manufacture the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'DaysToManufacture' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductLine' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'R = Road, M = Mountain, T = Touring, S = Standard' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ProductLine' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'R = Road, M = Mountain, T = Touring, S = Standard' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ProductLine' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Class' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'H = High, M = Medium, L = Low' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Class' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'H = High, M = Medium, L = Low' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Class' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Style' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'W = Womens, M = Mens, U = Universal' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Style' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'W = Womens, M = Mens, U = Universal' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'Style' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductSubcategoryID' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ProductSubcategoryID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ProductSubcategoryID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductModelID' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product is a member of this product model. Foreign key to ProductModel.ProductModelID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ProductModelID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product is a member of this product model. Foreign key to ProductModel.ProductModelID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ProductModelID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SellStartDate' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the product was available for sale.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'SellStartDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the product was available for sale.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'SellStartDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SellEndDate' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the product was no longer available for sale.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'SellEndDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the product was no longer available for sale.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'SellEndDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DiscontinuedDate' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the product was discontinued.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'DiscontinuedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the product was discontinued.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'DiscontinuedDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Product') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.Product')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Product' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-9
CREATE TABLE Production.ProductListPriceHistory (ProductID int NOT NULL, StartDate datetime NOT NULL, EndDate datetime, ListPrice money NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductListPriceHistory_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductListPriceHistory_ProductID_StartDate PRIMARY KEY (ProductID, StartDate));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductListPriceHistory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Changes in the list price of a product over time.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Changes in the list price of a product over time.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductListPriceHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Production.ProductListPriceHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductListPriceHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StartDate' AND object_id = OBJECT_ID('Production.ProductListPriceHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'List price start date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' , @level2type = N'COLUMN' , @level2name = N'StartDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'List price start date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' , @level2type = N'COLUMN' , @level2name = N'StartDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductListPriceHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EndDate' AND object_id = OBJECT_ID('Production.ProductListPriceHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'List price end date' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' , @level2type = N'COLUMN' , @level2name = N'EndDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'List price end date' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' , @level2type = N'COLUMN' , @level2name = N'EndDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductListPriceHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ListPrice' AND object_id = OBJECT_ID('Production.ProductListPriceHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product list price.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' , @level2type = N'COLUMN' , @level2name = N'ListPrice' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product list price.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' , @level2type = N'COLUMN' , @level2name = N'ListPrice' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductListPriceHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductListPriceHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductListPriceHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-10
CREATE TABLE Production.ProductCostHistory (ProductID int NOT NULL, StartDate datetime NOT NULL, EndDate datetime, StandardCost money NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductCostHistory_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductCostHistory_ProductID_StartDate PRIMARY KEY (ProductID, StartDate));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductCostHistory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Changes in the cost of a product over time.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Changes in the cost of a product over time.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductCostHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Production.ProductCostHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductCostHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StartDate' AND object_id = OBJECT_ID('Production.ProductCostHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product cost start date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' , @level2type = N'COLUMN' , @level2name = N'StartDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product cost start date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' , @level2type = N'COLUMN' , @level2name = N'StartDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductCostHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EndDate' AND object_id = OBJECT_ID('Production.ProductCostHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product cost end date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' , @level2type = N'COLUMN' , @level2name = N'EndDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product cost end date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' , @level2type = N'COLUMN' , @level2name = N'EndDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductCostHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StandardCost' AND object_id = OBJECT_ID('Production.ProductCostHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Standard cost of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' , @level2type = N'COLUMN' , @level2name = N'StandardCost' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Standard cost of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' , @level2type = N'COLUMN' , @level2name = N'StandardCost' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductCostHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductCostHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCostHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-11
CREATE TABLE Production.ProductInventory (ProductID int NOT NULL, LocationID smallint NOT NULL, Shelf nvarchar(10) NOT NULL, Bin tinyint NOT NULL, Quantity smallint CONSTRAINT DF_ProductInventory_Quantity DEFAULT 0 NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_ProductInventory_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductInventory_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductInventory_ProductID_LocationID PRIMARY KEY (ProductID, LocationID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductInventory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product inventory information.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product inventory information.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductInventory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Production.ProductInventory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductInventory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'LocationID' AND object_id = OBJECT_ID('Production.ProductInventory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Inventory location identification number. Foreign key to Location.LocationID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'LocationID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Inventory location identification number. Foreign key to Location.LocationID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'LocationID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductInventory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Shelf' AND object_id = OBJECT_ID('Production.ProductInventory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Storage compartment within an inventory location.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'Shelf' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Storage compartment within an inventory location.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'Shelf' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductInventory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Bin' AND object_id = OBJECT_ID('Production.ProductInventory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Storage container on a shelf in an inventory location.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'Bin' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Storage container on a shelf in an inventory location.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'Bin' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductInventory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Quantity' AND object_id = OBJECT_ID('Production.ProductInventory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Quantity of products in the inventory location.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'Quantity' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Quantity of products in the inventory location.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'Quantity' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductInventory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Production.ProductInventory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductInventory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductInventory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductInventory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-12
CREATE TABLE Production.BillOfMaterials (BillOfMaterialsID int IDENTITY (1, 1) NOT NULL, ProductAssemblyID int, ComponentID int NOT NULL, StartDate datetime CONSTRAINT DF_BillOfMaterials_StartDate DEFAULT GETDATE() NOT NULL, EndDate datetime, UnitMeasureCode nchar(3) NOT NULL, BOMLevel smallint NOT NULL, PerAssemblyQty decimal(8, 2) CONSTRAINT DF_BillOfMaterials_PerAssemblyQty DEFAULT 1 NOT NULL, ModifiedDate datetime CONSTRAINT DF_BillOfMaterials_ModifiedDate DEFAULT GETDATE() NOT NULL);
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.BillOfMaterials') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.BillOfMaterials') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BillOfMaterialsID' AND object_id = OBJECT_ID('Production.BillOfMaterials')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for BillOfMaterials records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'BillOfMaterialsID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for BillOfMaterials records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'BillOfMaterialsID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.BillOfMaterials') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductAssemblyID' AND object_id = OBJECT_ID('Production.BillOfMaterials')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Parent product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'ProductAssemblyID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Parent product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'ProductAssemblyID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.BillOfMaterials') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ComponentID' AND object_id = OBJECT_ID('Production.BillOfMaterials')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Component identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'ComponentID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Component identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'ComponentID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.BillOfMaterials') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StartDate' AND object_id = OBJECT_ID('Production.BillOfMaterials')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the component started being used in the assembly item.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'StartDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the component started being used in the assembly item.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'StartDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.BillOfMaterials') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EndDate' AND object_id = OBJECT_ID('Production.BillOfMaterials')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the component stopped being used in the assembly item.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'EndDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the component stopped being used in the assembly item.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'EndDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.BillOfMaterials') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'UnitMeasureCode' AND object_id = OBJECT_ID('Production.BillOfMaterials')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Standard code identifying the unit of measure for the quantity.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'UnitMeasureCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Standard code identifying the unit of measure for the quantity.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'UnitMeasureCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.BillOfMaterials') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BOMLevel' AND object_id = OBJECT_ID('Production.BillOfMaterials')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Indicates the depth the component is from its parent (AssemblyID).' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'BOMLevel' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Indicates the depth the component is from its parent (AssemblyID).' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'BOMLevel' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.BillOfMaterials') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PerAssemblyQty' AND object_id = OBJECT_ID('Production.BillOfMaterials')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Quantity of the component needed to create the assembly.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'PerAssemblyQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Quantity of the component needed to create the assembly.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'PerAssemblyQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.BillOfMaterials') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.BillOfMaterials')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'BillOfMaterials' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-13
CREATE TABLE HumanResources.JobCandidate (JobCandidateID int IDENTITY (1, 1) NOT NULL, BusinessEntityID int, Resume xml, ModifiedDate datetime CONSTRAINT DF_JobCandidate_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_JobCandidate_JobCandidateID PRIMARY KEY (JobCandidateID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.JobCandidate') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Résumés submitted to Human Resources by job applicants.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'JobCandidate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Résumés submitted to Human Resources by job applicants.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'JobCandidate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.JobCandidate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'JobCandidateID' AND object_id = OBJECT_ID('HumanResources.JobCandidate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for JobCandidate records.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'JobCandidate' , @level2type = N'COLUMN' , @level2name = N'JobCandidateID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for JobCandidate records.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'JobCandidate' , @level2type = N'COLUMN' , @level2name = N'JobCandidateID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.JobCandidate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('HumanResources.JobCandidate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'JobCandidate' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'JobCandidate' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.JobCandidate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Resume' AND object_id = OBJECT_ID('HumanResources.JobCandidate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Résumé in XML format.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'JobCandidate' , @level2type = N'COLUMN' , @level2name = N'Resume' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Résumé in XML format.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'JobCandidate' , @level2type = N'COLUMN' , @level2name = N'Resume' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.JobCandidate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('HumanResources.JobCandidate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'JobCandidate' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'JobCandidate' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-14
CREATE TABLE HumanResources.Department (DepartmentID smallint IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, GroupName Name NOT NULL, ModifiedDate datetime CONSTRAINT DF_Department_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Department_DepartmentID PRIMARY KEY (DepartmentID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Department') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Lookup table containing the departments within the Adventure Works Cycles company.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Department' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Lookup table containing the departments within the Adventure Works Cycles company.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Department' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Department') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DepartmentID' AND object_id = OBJECT_ID('HumanResources.Department')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for Department records.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Department' , @level2type = N'COLUMN' , @level2name = N'DepartmentID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for Department records.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Department' , @level2type = N'COLUMN' , @level2name = N'DepartmentID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Department') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('HumanResources.Department')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Name of the department.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Department' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Name of the department.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Department' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Department') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'GroupName' AND object_id = OBJECT_ID('HumanResources.Department')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Name of the group to which the department belongs.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Department' , @level2type = N'COLUMN' , @level2name = N'GroupName' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Name of the group to which the department belongs.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Department' , @level2type = N'COLUMN' , @level2name = N'GroupName' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Department') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('HumanResources.Department')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Department' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Department' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-15
CREATE TABLE HumanResources.Shift (ShiftID tinyint IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, StartTime time NOT NULL, EndTime time NOT NULL, ModifiedDate datetime CONSTRAINT DF_Shift_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Shift_ShiftID PRIMARY KEY (ShiftID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Shift') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Work shift lookup table.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Work shift lookup table.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Shift') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShiftID' AND object_id = OBJECT_ID('HumanResources.Shift')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for Shift records.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' , @level2type = N'COLUMN' , @level2name = N'ShiftID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for Shift records.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' , @level2type = N'COLUMN' , @level2name = N'ShiftID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Shift') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('HumanResources.Shift')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shift description.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shift description.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Shift') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StartTime' AND object_id = OBJECT_ID('HumanResources.Shift')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shift start time.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' , @level2type = N'COLUMN' , @level2name = N'StartTime' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shift start time.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' , @level2type = N'COLUMN' , @level2name = N'StartTime' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Shift') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EndTime' AND object_id = OBJECT_ID('HumanResources.Shift')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shift end time.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' , @level2type = N'COLUMN' , @level2name = N'EndTime' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shift end time.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' , @level2type = N'COLUMN' , @level2name = N'EndTime' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.Shift') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('HumanResources.Shift')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'Shift' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-16
CREATE TABLE HumanResources.EmployeeDepartmentHistory (BusinessEntityID int NOT NULL, DepartmentID smallint NOT NULL, ShiftID tinyint NOT NULL, StartDate date NOT NULL, EndDate date, ModifiedDate datetime CONSTRAINT DF_EmployeeDepartmentHistory_ModifiedDate DEFAULT GETDATE() NOT NULL);
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Employee department transfers.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Employee department transfers.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Employee identification number. Foreign key to Employee.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Employee identification number. Foreign key to Employee.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DepartmentID' AND object_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Department in which the employee worked including currently. Foreign key to Department.DepartmentID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'DepartmentID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Department in which the employee worked including currently. Foreign key to Department.DepartmentID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'DepartmentID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShiftID' AND object_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'ShiftID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'ShiftID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StartDate' AND object_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the employee started work in the department.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'StartDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the employee started work in the department.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'StartDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EndDate' AND object_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the employee left the department. NULL = Current department.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'EndDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the employee left the department. NULL = Current department.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'EndDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('HumanResources.EmployeeDepartmentHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeeDepartmentHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-17
CREATE TABLE HumanResources.EmployeePayHistory (BusinessEntityID int NOT NULL, RateChangeDate datetime NOT NULL, Rate money NOT NULL, PayFrequency tinyint NOT NULL, ModifiedDate datetime CONSTRAINT DF_EmployeePayHistory_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_EmployeePayHistory_BusinessEntityID_RateChangeDate PRIMARY KEY (BusinessEntityID, RateChangeDate));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeePayHistory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Employee pay history.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Employee pay history.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeePayHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('HumanResources.EmployeePayHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Employee identification number. Foreign key to Employee.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Employee identification number. Foreign key to Employee.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeePayHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'RateChangeDate' AND object_id = OBJECT_ID('HumanResources.EmployeePayHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the change in pay is effective' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' , @level2type = N'COLUMN' , @level2name = N'RateChangeDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the change in pay is effective' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' , @level2type = N'COLUMN' , @level2name = N'RateChangeDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeePayHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Rate' AND object_id = OBJECT_ID('HumanResources.EmployeePayHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Salary hourly rate.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' , @level2type = N'COLUMN' , @level2name = N'Rate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Salary hourly rate.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' , @level2type = N'COLUMN' , @level2name = N'Rate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeePayHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PayFrequency' AND object_id = OBJECT_ID('HumanResources.EmployeePayHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'1 = Salary received monthly, 2 = Salary received biweekly' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' , @level2type = N'COLUMN' , @level2name = N'PayFrequency' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'1 = Salary received monthly, 2 = Salary received biweekly' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' , @level2type = N'COLUMN' , @level2name = N'PayFrequency' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.EmployeePayHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('HumanResources.EmployeePayHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'TABLE' , @level1name = N'EmployeePayHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-18
CREATE TABLE Person.Address (AddressID int IDENTITY (1, 1) NOT NULL, AddressLine1 nvarchar(60) NOT NULL, AddressLine2 nvarchar(60), City nvarchar(30) NOT NULL, StateProvinceID int NOT NULL, PostalCode nvarchar(15) NOT NULL, SpatialLocation geography, rowguid uniqueidentifier CONSTRAINT DF_Address_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_Address_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Address_AddressID PRIMARY KEY (AddressID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Address') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Street address information for customers, employees, and vendors.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Street address information for customers, employees, and vendors.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Address') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AddressID' AND object_id = OBJECT_ID('Person.Address')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for Address records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'AddressID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for Address records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'AddressID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Address') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AddressLine1' AND object_id = OBJECT_ID('Person.Address')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'First street address line.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'AddressLine1' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'First street address line.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'AddressLine1' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Address') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AddressLine2' AND object_id = OBJECT_ID('Person.Address')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Second street address line.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'AddressLine2' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Second street address line.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'AddressLine2' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Address') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'City' AND object_id = OBJECT_ID('Person.Address')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Name of the city.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'City' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Name of the city.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'City' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Address') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StateProvinceID' AND object_id = OBJECT_ID('Person.Address')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Unique identification number for the state or province. Foreign key to StateProvince table.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'StateProvinceID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Unique identification number for the state or province. Foreign key to StateProvince table.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'StateProvinceID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Address') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PostalCode' AND object_id = OBJECT_ID('Person.Address')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Postal code for the street address.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'PostalCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Postal code for the street address.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'PostalCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Address') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SpatialLocation' AND object_id = OBJECT_ID('Person.Address')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Latitude and longitude of this address.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'SpatialLocation' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Latitude and longitude of this address.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'SpatialLocation' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Address') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Person.Address')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Address') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.Address')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Address' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-19
CREATE TABLE Person.BusinessEntityAddress (BusinessEntityID int NOT NULL, AddressID int NOT NULL, AddressTypeID int NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_BusinessEntityAddress_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_BusinessEntityAddress_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID PRIMARY KEY (BusinessEntityID, AddressID, AddressTypeID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityAddress') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping customers, vendors, and employees to their addresses.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping customers, vendors, and employees to their addresses.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityAddress') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Person.BusinessEntityAddress')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to BusinessEntity.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to BusinessEntity.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityAddress') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AddressID' AND object_id = OBJECT_ID('Person.BusinessEntityAddress')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Address.AddressID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' , @level2type = N'COLUMN' , @level2name = N'AddressID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Address.AddressID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' , @level2type = N'COLUMN' , @level2name = N'AddressID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityAddress') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AddressTypeID' AND object_id = OBJECT_ID('Person.BusinessEntityAddress')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to AddressType.AddressTypeID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' , @level2type = N'COLUMN' , @level2name = N'AddressTypeID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to AddressType.AddressTypeID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' , @level2type = N'COLUMN' , @level2name = N'AddressTypeID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityAddress') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Person.BusinessEntityAddress')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntityAddress') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.BusinessEntityAddress')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntityAddress' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-20
CREATE TABLE Person.CountryRegion (CountryRegionCode nvarchar(3) NOT NULL, Name Name NOT NULL, ModifiedDate datetime CONSTRAINT DF_CountryRegion_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_CountryRegion_CountryRegionCode PRIMARY KEY (CountryRegionCode));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.CountryRegion') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Lookup table containing the ISO standard codes for countries and regions.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'CountryRegion' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Lookup table containing the ISO standard codes for countries and regions.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'CountryRegion' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.CountryRegion') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CountryRegionCode' AND object_id = OBJECT_ID('Person.CountryRegion')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ISO standard code for countries and regions.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'CountryRegion' , @level2type = N'COLUMN' , @level2name = N'CountryRegionCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ISO standard code for countries and regions.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'CountryRegion' , @level2type = N'COLUMN' , @level2name = N'CountryRegionCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.CountryRegion') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Person.CountryRegion')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Country or region name.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'CountryRegion' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Country or region name.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'CountryRegion' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.CountryRegion') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.CountryRegion')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'CountryRegion' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'CountryRegion' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-21
CREATE TABLE Person.EmailAddress (BusinessEntityID int NOT NULL, EmailAddressID int IDENTITY (1, 1) NOT NULL, EmailAddress nvarchar(50), rowguid uniqueidentifier CONSTRAINT DF_EmailAddress_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_EmailAddress_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_EmailAddress_BusinessEntityID_EmailAddressID PRIMARY KEY (BusinessEntityID, EmailAddressID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.EmailAddress') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Where to send a person email.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Where to send a person email.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.EmailAddress') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Person.EmailAddress')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.EmailAddress') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EmailAddressID' AND object_id = OBJECT_ID('Person.EmailAddress')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. ID of this email address.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' , @level2type = N'COLUMN' , @level2name = N'EmailAddressID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. ID of this email address.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' , @level2type = N'COLUMN' , @level2name = N'EmailAddressID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.EmailAddress') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EmailAddress' AND object_id = OBJECT_ID('Person.EmailAddress')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'E-mail address for the person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' , @level2type = N'COLUMN' , @level2name = N'EmailAddress' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'E-mail address for the person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' , @level2type = N'COLUMN' , @level2name = N'EmailAddress' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.EmailAddress') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Person.EmailAddress')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.EmailAddress') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.EmailAddress')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'EmailAddress' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-22
CREATE TABLE Person.PersonPhone (BusinessEntityID int NOT NULL, PhoneNumber Phone NOT NULL, PhoneNumberTypeID int NOT NULL, ModifiedDate datetime CONSTRAINT DF_PersonPhone_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID PRIMARY KEY (BusinessEntityID, PhoneNumber, PhoneNumberTypeID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.PersonPhone') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Telephone number and type of a person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PersonPhone' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Telephone number and type of a person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PersonPhone' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.PersonPhone') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Person.PersonPhone')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Business entity identification number. Foreign key to Person.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PersonPhone' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Business entity identification number. Foreign key to Person.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PersonPhone' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.PersonPhone') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PhoneNumber' AND object_id = OBJECT_ID('Person.PersonPhone')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Telephone number identification number.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PersonPhone' , @level2type = N'COLUMN' , @level2name = N'PhoneNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Telephone number identification number.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PersonPhone' , @level2type = N'COLUMN' , @level2name = N'PhoneNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.PersonPhone') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PhoneNumberTypeID' AND object_id = OBJECT_ID('Person.PersonPhone')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PersonPhone' , @level2type = N'COLUMN' , @level2name = N'PhoneNumberTypeID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PersonPhone' , @level2type = N'COLUMN' , @level2name = N'PhoneNumberTypeID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.PersonPhone') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.PersonPhone')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PersonPhone' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PersonPhone' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-23
CREATE TABLE Person.PhoneNumberType (PhoneNumberTypeID int IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, ModifiedDate datetime CONSTRAINT DF_PhoneNumberType_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_PhoneNumberType_PhoneNumberTypeID PRIMARY KEY (PhoneNumberTypeID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.PhoneNumberType') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Type of phone number of a person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PhoneNumberType' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Type of phone number of a person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PhoneNumberType' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.PhoneNumberType') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PhoneNumberTypeID' AND object_id = OBJECT_ID('Person.PhoneNumberType')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for telephone number type records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PhoneNumberType' , @level2type = N'COLUMN' , @level2name = N'PhoneNumberTypeID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for telephone number type records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PhoneNumberType' , @level2type = N'COLUMN' , @level2name = N'PhoneNumberTypeID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.PhoneNumberType') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Person.PhoneNumberType')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Name of the telephone number type' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PhoneNumberType' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Name of the telephone number type' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PhoneNumberType' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.PhoneNumberType') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.PhoneNumberType')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PhoneNumberType' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'PhoneNumberType' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-24
CREATE TABLE Person.StateProvince (StateProvinceID int IDENTITY (1, 1) NOT NULL, StateProvinceCode nchar(3) NOT NULL, CountryRegionCode nvarchar(3) NOT NULL, IsOnlyStateProvinceFlag Flag(1) CONSTRAINT DF_StateProvince_IsOnlyStateProvinceFlag DEFAULT 1 NOT NULL, Name Name NOT NULL, TerritoryID int NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_StateProvince_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_StateProvince_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_StateProvince_StateProvinceID PRIMARY KEY (StateProvinceID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.StateProvince') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'State and province lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'State and province lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.StateProvince') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StateProvinceID' AND object_id = OBJECT_ID('Person.StateProvince')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for StateProvince records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'StateProvinceID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for StateProvince records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'StateProvinceID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.StateProvince') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StateProvinceCode' AND object_id = OBJECT_ID('Person.StateProvince')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ISO standard state or province code.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'StateProvinceCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ISO standard state or province code.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'StateProvinceCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.StateProvince') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CountryRegionCode' AND object_id = OBJECT_ID('Person.StateProvince')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'CountryRegionCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'CountryRegionCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.StateProvince') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'IsOnlyStateProvinceFlag' AND object_id = OBJECT_ID('Person.StateProvince')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'IsOnlyStateProvinceFlag' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'IsOnlyStateProvinceFlag' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.StateProvince') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Person.StateProvince')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'State or province description.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'State or province description.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.StateProvince') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TerritoryID' AND object_id = OBJECT_ID('Person.StateProvince')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.StateProvince') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Person.StateProvince')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.StateProvince') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.StateProvince')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'StateProvince' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-25
CREATE TABLE Person.AddressType (AddressTypeID int IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_AddressType_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_AddressType_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_AddressType_AddressTypeID PRIMARY KEY (AddressTypeID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.AddressType') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Types of addresses stored in the Address table.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'AddressType' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Types of addresses stored in the Address table.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'AddressType' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.AddressType') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AddressTypeID' AND object_id = OBJECT_ID('Person.AddressType')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for AddressType records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'AddressType' , @level2type = N'COLUMN' , @level2name = N'AddressTypeID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for AddressType records.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'AddressType' , @level2type = N'COLUMN' , @level2name = N'AddressTypeID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.AddressType') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Person.AddressType')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Address type description. For example, Billing, Home, or Shipping.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'AddressType' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Address type description. For example, Billing, Home, or Shipping.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'AddressType' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.AddressType') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Person.AddressType')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'AddressType' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'AddressType' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.AddressType') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.AddressType')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'AddressType' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'AddressType' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-26
CREATE TABLE Person.BusinessEntity (BusinessEntityID int IDENTITY (1, 1) NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_BusinessEntity_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_BusinessEntity_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_BusinessEntity_BusinessEntityID PRIMARY KEY (BusinessEntityID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntity') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Source of the ID that connects vendors, customers, and employees with address and contact information.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntity' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Source of the ID that connects vendors, customers, and employees with address and contact information.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntity' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntity') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Person.BusinessEntity')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for all customers, vendors, and employees.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntity' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for all customers, vendors, and employees.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntity' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntity') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Person.BusinessEntity')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntity' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntity' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.BusinessEntity') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.BusinessEntity')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntity' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'BusinessEntity' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-27
CREATE TABLE Person.Password (BusinessEntityID int NOT NULL, PasswordHash varchar(128) NOT NULL, PasswordSalt varchar(10) NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_Password_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_Password_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Password_BusinessEntityID PRIMARY KEY (BusinessEntityID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Password') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'One way hashed authentication information' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Password' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'One way hashed authentication information' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Password' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Password') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PasswordHash' AND object_id = OBJECT_ID('Person.Password')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Password for the e-mail account.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Password' , @level2type = N'COLUMN' , @level2name = N'PasswordHash' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Password for the e-mail account.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Password' , @level2type = N'COLUMN' , @level2name = N'PasswordHash' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Password') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PasswordSalt' AND object_id = OBJECT_ID('Person.Password')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Random value concatenated with the password string before the password is hashed.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Password' , @level2type = N'COLUMN' , @level2name = N'PasswordSalt' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Random value concatenated with the password string before the password is hashed.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Password' , @level2type = N'COLUMN' , @level2name = N'PasswordSalt' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Password') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Person.Password')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Password' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Password' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.Password') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Person.Password')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Password' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'TABLE' , @level1name = N'Password' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-28
CREATE TABLE Production.ProductProductPhoto (ProductID int NOT NULL, ProductPhotoID int NOT NULL, [Primary] Flag(1) CONSTRAINT DF_ProductProductPhoto_Primary DEFAULT 0 NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductProductPhoto_ModifiedDate DEFAULT GETDATE() NOT NULL);
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping products and product photos.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductProductPhoto' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping products and product photos.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductProductPhoto' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Production.ProductProductPhoto')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductPhotoID' AND object_id = OBJECT_ID('Production.ProductProductPhoto')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ProductPhotoID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ProductPhotoID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Primary' AND object_id = OBJECT_ID('Production.ProductProductPhoto')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'0 = Photo is not the principal image. 1 = Photo is the principal image.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductProductPhoto' , @level2type = N'COLUMN' , @level2name = N'Primary' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'0 = Photo is not the principal image. 1 = Photo is the principal image.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductProductPhoto' , @level2type = N'COLUMN' , @level2name = N'Primary' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductProductPhoto')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-29
CREATE TABLE Production.Culture (CultureID nchar(6) NOT NULL, Name Name NOT NULL, ModifiedDate datetime CONSTRAINT DF_Culture_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Culture_CultureID PRIMARY KEY (CultureID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Culture') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Lookup table containing the languages in which some AdventureWorks data is stored.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Culture' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Lookup table containing the languages in which some AdventureWorks data is stored.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Culture' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Culture') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CultureID' AND object_id = OBJECT_ID('Production.Culture')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for Culture records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Culture' , @level2type = N'COLUMN' , @level2name = N'CultureID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for Culture records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Culture' , @level2type = N'COLUMN' , @level2name = N'CultureID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Culture') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Production.Culture')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Culture description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Culture' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Culture description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Culture' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Culture') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.Culture')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Culture' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Culture' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-30
CREATE TABLE Production.Document (DocumentNode hierarchyid NOT NULL, DocumentLevel smallint, Title nvarchar(50) NOT NULL, Owner int NOT NULL, FolderFlag bit CONSTRAINT DF_Document_FolderFlag DEFAULT 'false' NOT NULL, FileName nvarchar(400) NOT NULL, FileExtension nvarchar(8) NOT NULL, Revision nchar(5) NOT NULL, ChangeNumber int CONSTRAINT DF_Document_ChangeNumber DEFAULT 0 NOT NULL, Status tinyint NOT NULL, DocumentSummary nvarchar(MAX), Document varbinary(MAX), rowguid uniqueidentifier CONSTRAINT DF_Document_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_Document_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Document_DocumentNode PRIMARY KEY (DocumentNode));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product maintenance documents.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product maintenance documents.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DocumentNode' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for Document records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'DocumentNode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for Document records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'DocumentNode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DocumentLevel' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Depth in the document hierarchy.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'DocumentLevel' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Depth in the document hierarchy.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'DocumentLevel' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Title' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Title of the document.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'Title' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Title of the document.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'Title' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Owner' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Employee who controls the document.  Foreign key to Employee.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'Owner' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Employee who controls the document.  Foreign key to Employee.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'Owner' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'FolderFlag' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'0 = This is a folder, 1 = This is a document.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'FolderFlag' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'0 = This is a folder, 1 = This is a document.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'FolderFlag' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'FileName' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'File name of the document' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'FileName' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'File name of the document' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'FileName' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'FileExtension' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'File extension indicating the document type. For example, .doc or .txt.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'FileExtension' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'File extension indicating the document type. For example, .doc or .txt.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'FileExtension' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Revision' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Revision number of the document.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'Revision' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Revision number of the document.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'Revision' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ChangeNumber' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Engineering change approval number.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'ChangeNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Engineering change approval number.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'ChangeNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Status' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'1 = Pending approval, 2 = Approved, 3 = Obsolete' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'Status' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'1 = Pending approval, 2 = Approved, 3 = Obsolete' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'Status' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DocumentSummary' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Document abstract.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'DocumentSummary' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Document abstract.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'DocumentSummary' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Document' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Complete document.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'Document' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Complete document.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'Document' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Required for FileStream.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Required for FileStream.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Document') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.Document')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Document' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-31
CREATE TABLE Production.Location (LocationID smallint IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, CostRate smallmoney CONSTRAINT DF_Location_CostRate DEFAULT 0 NOT NULL, Availability decimal(8, 2) CONSTRAINT DF_Location_Availability DEFAULT 0 NOT NULL, ModifiedDate datetime CONSTRAINT DF_Location_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Location_LocationID PRIMARY KEY (LocationID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Location') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product inventory and manufacturing locations.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product inventory and manufacturing locations.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Location') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'LocationID' AND object_id = OBJECT_ID('Production.Location')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for Location records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' , @level2type = N'COLUMN' , @level2name = N'LocationID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for Location records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' , @level2type = N'COLUMN' , @level2name = N'LocationID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Location') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Production.Location')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Location description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Location description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Location') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CostRate' AND object_id = OBJECT_ID('Production.Location')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Standard hourly cost of the manufacturing location.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' , @level2type = N'COLUMN' , @level2name = N'CostRate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Standard hourly cost of the manufacturing location.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' , @level2type = N'COLUMN' , @level2name = N'CostRate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Location') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Availability' AND object_id = OBJECT_ID('Production.Location')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Work capacity (in hours) of the manufacturing location.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' , @level2type = N'COLUMN' , @level2name = N'Availability' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Work capacity (in hours) of the manufacturing location.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' , @level2type = N'COLUMN' , @level2name = N'Availability' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Location') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.Location')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Location' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-32
CREATE TABLE Production.ProductCategory (ProductCategoryID int IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_ProductCategory_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductCategory_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductCategory_ProductCategoryID PRIMARY KEY (ProductCategoryID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductCategory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'High-level product categorization.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCategory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'High-level product categorization.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCategory' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductCategory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductCategoryID' AND object_id = OBJECT_ID('Production.ProductCategory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductCategory records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCategory' , @level2type = N'COLUMN' , @level2name = N'ProductCategoryID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductCategory records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCategory' , @level2type = N'COLUMN' , @level2name = N'ProductCategoryID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductCategory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Production.ProductCategory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Category description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCategory' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Category description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCategory' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductCategory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Production.ProductCategory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCategory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCategory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductCategory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductCategory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCategory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductCategory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-33
CREATE TABLE Production.ProductDescription (ProductDescriptionID int IDENTITY (1, 1) NOT NULL, Description nvarchar(400) NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_ProductDescription_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductDescription_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductDescription_ProductDescriptionID PRIMARY KEY (ProductDescriptionID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductDescription') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product descriptions in several languages.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDescription' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product descriptions in several languages.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDescription' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductDescription') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductDescriptionID' AND object_id = OBJECT_ID('Production.ProductDescription')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductDescription records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDescription' , @level2type = N'COLUMN' , @level2name = N'ProductDescriptionID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductDescription records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDescription' , @level2type = N'COLUMN' , @level2name = N'ProductDescriptionID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductDescription') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Description' AND object_id = OBJECT_ID('Production.ProductDescription')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Description of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDescription' , @level2type = N'COLUMN' , @level2name = N'Description' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Description of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDescription' , @level2type = N'COLUMN' , @level2name = N'Description' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductDescription') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Production.ProductDescription')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDescription' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDescription' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductDescription') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductDescription')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDescription' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDescription' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-34
CREATE TABLE Production.ProductModel (ProductModelID int IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, CatalogDescription xml, Instructions xml, rowguid uniqueidentifier CONSTRAINT DF_ProductModel_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductModel_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductModel_ProductModelID PRIMARY KEY (ProductModelID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModel') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product model classification.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product model classification.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModel') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductModelID' AND object_id = OBJECT_ID('Production.ProductModel')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductModel records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'ProductModelID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductModel records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'ProductModelID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModel') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Production.ProductModel')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product model description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product model description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModel') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CatalogDescription' AND object_id = OBJECT_ID('Production.ProductModel')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Detailed product catalog information in xml format.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'CatalogDescription' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Detailed product catalog information in xml format.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'CatalogDescription' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModel') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Instructions' AND object_id = OBJECT_ID('Production.ProductModel')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Manufacturing instructions in xml format.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'Instructions' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Manufacturing instructions in xml format.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'Instructions' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModel') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Production.ProductModel')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModel') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductModel')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModel' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-35
CREATE TABLE Production.ProductSubcategory (ProductSubcategoryID int IDENTITY (1, 1) NOT NULL, ProductCategoryID int NOT NULL, Name Name NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_ProductSubcategory_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductSubcategory_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductSubcategory_ProductSubcategoryID PRIMARY KEY (ProductSubcategoryID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductSubcategory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product subcategories. See ProductCategory table.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product subcategories. See ProductCategory table.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductSubcategory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductSubcategoryID' AND object_id = OBJECT_ID('Production.ProductSubcategory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductSubcategory records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' , @level2type = N'COLUMN' , @level2name = N'ProductSubcategoryID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductSubcategory records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' , @level2type = N'COLUMN' , @level2name = N'ProductSubcategoryID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductSubcategory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductCategoryID' AND object_id = OBJECT_ID('Production.ProductSubcategory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product category identification number. Foreign key to ProductCategory.ProductCategoryID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' , @level2type = N'COLUMN' , @level2name = N'ProductCategoryID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product category identification number. Foreign key to ProductCategory.ProductCategoryID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' , @level2type = N'COLUMN' , @level2name = N'ProductCategoryID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductSubcategory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Production.ProductSubcategory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Subcategory description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Subcategory description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductSubcategory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Production.ProductSubcategory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductSubcategory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductSubcategory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductSubcategory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-36
CREATE TABLE Production.ScrapReason (ScrapReasonID smallint IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, ModifiedDate datetime CONSTRAINT DF_ScrapReason_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ScrapReason_ScrapReasonID PRIMARY KEY (ScrapReasonID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ScrapReason') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Manufacturing failure reasons lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ScrapReason' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Manufacturing failure reasons lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ScrapReason' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ScrapReason') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ScrapReasonID' AND object_id = OBJECT_ID('Production.ScrapReason')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for ScrapReason records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ScrapReason' , @level2type = N'COLUMN' , @level2name = N'ScrapReasonID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for ScrapReason records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ScrapReason' , @level2type = N'COLUMN' , @level2name = N'ScrapReasonID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ScrapReason') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Production.ScrapReason')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Failure description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ScrapReason' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Failure description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ScrapReason' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ScrapReason') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ScrapReason')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ScrapReason' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ScrapReason' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-37
CREATE TABLE Production.UnitMeasure (UnitMeasureCode nchar(3) NOT NULL, Name Name NOT NULL, ModifiedDate datetime CONSTRAINT DF_UnitMeasure_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_UnitMeasure_UnitMeasureCode PRIMARY KEY (UnitMeasureCode));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.UnitMeasure') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Unit of measure lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'UnitMeasure' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Unit of measure lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'UnitMeasure' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.UnitMeasure') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'UnitMeasureCode' AND object_id = OBJECT_ID('Production.UnitMeasure')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'UnitMeasure' , @level2type = N'COLUMN' , @level2name = N'UnitMeasureCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'UnitMeasure' , @level2type = N'COLUMN' , @level2name = N'UnitMeasureCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.UnitMeasure') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Production.UnitMeasure')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Unit of measure description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'UnitMeasure' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Unit of measure description.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'UnitMeasure' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.UnitMeasure') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.UnitMeasure')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'UnitMeasure' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'UnitMeasure' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-38
CREATE TABLE Production.ProductReview (ProductReviewID int IDENTITY (1, 1) NOT NULL, ProductID int NOT NULL, ReviewerName Name NOT NULL, ReviewDate datetime CONSTRAINT DF_ProductReview_ReviewDate DEFAULT GETDATE() NOT NULL, EmailAddress nvarchar(50) NOT NULL, Rating int NOT NULL, Comments nvarchar(3850), ModifiedDate datetime CONSTRAINT DF_ProductReview_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductReview_ProductReviewID PRIMARY KEY (ProductReviewID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductReview') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Customer reviews of products they have purchased.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Customer reviews of products they have purchased.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductReview') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductReviewID' AND object_id = OBJECT_ID('Production.ProductReview')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductReview records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'ProductReviewID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductReview records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'ProductReviewID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductReview') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Production.ProductReview')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductReview') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ReviewerName' AND object_id = OBJECT_ID('Production.ProductReview')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Name of the reviewer.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'ReviewerName' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Name of the reviewer.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'ReviewerName' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductReview') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ReviewDate' AND object_id = OBJECT_ID('Production.ProductReview')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date review was submitted.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'ReviewDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date review was submitted.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'ReviewDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductReview') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EmailAddress' AND object_id = OBJECT_ID('Production.ProductReview')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Reviewer''s e-mail address.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'EmailAddress' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Reviewer''s e-mail address.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'EmailAddress' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductReview') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Rating' AND object_id = OBJECT_ID('Production.ProductReview')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'Rating' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'Rating' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductReview') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Comments' AND object_id = OBJECT_ID('Production.ProductReview')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Reviewer''s comments' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'Comments' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Reviewer''s comments' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'Comments' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductReview') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductReview')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductReview' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-39
CREATE TABLE Production.TransactionHistory (TransactionID int IDENTITY (1, 1) NOT NULL, ProductID int NOT NULL, ReferenceOrderID int NOT NULL, ReferenceOrderLineID int CONSTRAINT DF_TransactionHistory_ReferenceOrderLineID DEFAULT 0 NOT NULL, TransactionDate datetime CONSTRAINT DF_TransactionHistory_TransactionDate DEFAULT GETDATE() NOT NULL, TransactionType nchar(1) NOT NULL, Quantity int NOT NULL, ActualCost money NOT NULL, ModifiedDate datetime CONSTRAINT DF_TransactionHistory_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_TransactionHistory_TransactionID PRIMARY KEY (TransactionID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Record of each purchase order, sales order, or work order transaction year to date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Record of each purchase order, sales order, or work order transaction year to date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TransactionID' AND object_id = OBJECT_ID('Production.TransactionHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for TransactionHistory records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'TransactionID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for TransactionHistory records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'TransactionID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Production.TransactionHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ReferenceOrderID' AND object_id = OBJECT_ID('Production.TransactionHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Purchase order, sales order, or work order identification number.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'ReferenceOrderID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Purchase order, sales order, or work order identification number.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'ReferenceOrderID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ReferenceOrderLineID' AND object_id = OBJECT_ID('Production.TransactionHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Line number associated with the purchase order, sales order, or work order.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'ReferenceOrderLineID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Line number associated with the purchase order, sales order, or work order.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'ReferenceOrderLineID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TransactionDate' AND object_id = OBJECT_ID('Production.TransactionHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time of the transaction.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'TransactionDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time of the transaction.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'TransactionDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TransactionType' AND object_id = OBJECT_ID('Production.TransactionHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'W = WorkOrder, S = SalesOrder, P = PurchaseOrder' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'TransactionType' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'W = WorkOrder, S = SalesOrder, P = PurchaseOrder' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'TransactionType' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Quantity' AND object_id = OBJECT_ID('Production.TransactionHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product quantity.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'Quantity' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product quantity.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'Quantity' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ActualCost' AND object_id = OBJECT_ID('Production.TransactionHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product cost.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'ActualCost' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product cost.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'ActualCost' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.TransactionHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-40
CREATE TABLE Production.TransactionHistoryArchive (TransactionID int NOT NULL, ProductID int NOT NULL, ReferenceOrderID int NOT NULL, ReferenceOrderLineID int CONSTRAINT DF_TransactionHistoryArchive_ReferenceOrderLineID DEFAULT 0 NOT NULL, TransactionDate datetime CONSTRAINT DF_TransactionHistoryArchive_TransactionDate DEFAULT GETDATE() NOT NULL, TransactionType nchar(1) NOT NULL, Quantity int NOT NULL, ActualCost money NOT NULL, ModifiedDate datetime CONSTRAINT DF_TransactionHistoryArchive_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_TransactionHistoryArchive_TransactionID PRIMARY KEY (TransactionID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistoryArchive') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Transactions for previous years.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Transactions for previous years.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistoryArchive') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TransactionID' AND object_id = OBJECT_ID('Production.TransactionHistoryArchive')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for TransactionHistoryArchive records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'TransactionID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for TransactionHistoryArchive records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'TransactionID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistoryArchive') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Production.TransactionHistoryArchive')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistoryArchive') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ReferenceOrderID' AND object_id = OBJECT_ID('Production.TransactionHistoryArchive')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Purchase order, sales order, or work order identification number.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'ReferenceOrderID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Purchase order, sales order, or work order identification number.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'ReferenceOrderID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistoryArchive') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ReferenceOrderLineID' AND object_id = OBJECT_ID('Production.TransactionHistoryArchive')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Line number associated with the purchase order, sales order, or work order.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'ReferenceOrderLineID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Line number associated with the purchase order, sales order, or work order.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'ReferenceOrderLineID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistoryArchive') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TransactionDate' AND object_id = OBJECT_ID('Production.TransactionHistoryArchive')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time of the transaction.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'TransactionDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time of the transaction.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'TransactionDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistoryArchive') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TransactionType' AND object_id = OBJECT_ID('Production.TransactionHistoryArchive')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'W = Work Order, S = Sales Order, P = Purchase Order' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'TransactionType' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'W = Work Order, S = Sales Order, P = Purchase Order' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'TransactionType' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistoryArchive') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Quantity' AND object_id = OBJECT_ID('Production.TransactionHistoryArchive')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product quantity.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'Quantity' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product quantity.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'Quantity' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistoryArchive') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ActualCost' AND object_id = OBJECT_ID('Production.TransactionHistoryArchive')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product cost.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'ActualCost' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product cost.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'ActualCost' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.TransactionHistoryArchive') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.TransactionHistoryArchive')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'TransactionHistoryArchive' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-41
CREATE TABLE Production.WorkOrder (WorkOrderID int IDENTITY (1, 1) NOT NULL, ProductID int NOT NULL, OrderQty int NOT NULL, StockedQty int NOT NULL, ScrappedQty smallint NOT NULL, StartDate datetime NOT NULL, EndDate datetime, DueDate datetime NOT NULL, ScrapReasonID smallint, ModifiedDate datetime CONSTRAINT DF_WorkOrder_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_WorkOrder_WorkOrderID PRIMARY KEY (WorkOrderID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrder') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Manufacturing work orders.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Manufacturing work orders.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrder') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'WorkOrderID' AND object_id = OBJECT_ID('Production.WorkOrder')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for WorkOrder records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'WorkOrderID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for WorkOrder records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'WorkOrderID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrder') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Production.WorkOrder')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrder') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'OrderQty' AND object_id = OBJECT_ID('Production.WorkOrder')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product quantity to build.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'OrderQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product quantity to build.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'OrderQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrder') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StockedQty' AND object_id = OBJECT_ID('Production.WorkOrder')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Quantity built and put in inventory.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'StockedQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Quantity built and put in inventory.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'StockedQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrder') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ScrappedQty' AND object_id = OBJECT_ID('Production.WorkOrder')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Quantity that failed inspection.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'ScrappedQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Quantity that failed inspection.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'ScrappedQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrder') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StartDate' AND object_id = OBJECT_ID('Production.WorkOrder')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Work order start date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'StartDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Work order start date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'StartDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrder') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EndDate' AND object_id = OBJECT_ID('Production.WorkOrder')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Work order end date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'EndDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Work order end date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'EndDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrder') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DueDate' AND object_id = OBJECT_ID('Production.WorkOrder')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Work order due date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'DueDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Work order due date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'DueDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrder') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ScrapReasonID' AND object_id = OBJECT_ID('Production.WorkOrder')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Reason for inspection failure.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'ScrapReasonID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Reason for inspection failure.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'ScrapReasonID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrder') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.WorkOrder')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrder' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-42
CREATE TABLE Production.WorkOrderRouting (WorkOrderID int NOT NULL, ProductID int NOT NULL, OperationSequence smallint NOT NULL, LocationID smallint NOT NULL, ScheduledStartDate datetime NOT NULL, ScheduledEndDate datetime NOT NULL, ActualStartDate datetime, ActualEndDate datetime, ActualResourceHrs decimal(9, 4), PlannedCost money NOT NULL, ActualCost money, ModifiedDate datetime CONSTRAINT DF_WorkOrderRouting_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence PRIMARY KEY (WorkOrderID, ProductID, OperationSequence));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Work order details.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Work order details.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'WorkOrderID' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to WorkOrder.WorkOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'WorkOrderID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to WorkOrder.WorkOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'WorkOrderID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'OperationSequence' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Indicates the manufacturing process sequence.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'OperationSequence' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Indicates the manufacturing process sequence.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'OperationSequence' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'LocationID' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Manufacturing location where the part is processed. Foreign key to Location.LocationID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'LocationID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Manufacturing location where the part is processed. Foreign key to Location.LocationID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'LocationID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ScheduledStartDate' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Planned manufacturing start date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ScheduledStartDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Planned manufacturing start date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ScheduledStartDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ScheduledEndDate' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Planned manufacturing end date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ScheduledEndDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Planned manufacturing end date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ScheduledEndDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ActualStartDate' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Actual start date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ActualStartDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Actual start date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ActualStartDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ActualEndDate' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Actual end date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ActualEndDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Actual end date.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ActualEndDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ActualResourceHrs' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Number of manufacturing hours used.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ActualResourceHrs' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Number of manufacturing hours used.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ActualResourceHrs' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PlannedCost' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Estimated manufacturing cost.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'PlannedCost' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Estimated manufacturing cost.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'PlannedCost' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ActualCost' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Actual manufacturing cost.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ActualCost' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Actual manufacturing cost.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ActualCost' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.WorkOrderRouting') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.WorkOrderRouting')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'WorkOrderRouting' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-43
CREATE TABLE Production.Illustration (IllustrationID int IDENTITY (1, 1) NOT NULL, Diagram xml, ModifiedDate datetime CONSTRAINT DF_Illustration_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Illustration_IllustrationID PRIMARY KEY (IllustrationID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Illustration') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Bicycle assembly diagrams.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Illustration' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Bicycle assembly diagrams.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Illustration' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Illustration') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'IllustrationID' AND object_id = OBJECT_ID('Production.Illustration')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for Illustration records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Illustration' , @level2type = N'COLUMN' , @level2name = N'IllustrationID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for Illustration records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Illustration' , @level2type = N'COLUMN' , @level2name = N'IllustrationID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Illustration') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Diagram' AND object_id = OBJECT_ID('Production.Illustration')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Illustrations used in manufacturing instructions. Stored as XML.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Illustration' , @level2type = N'COLUMN' , @level2name = N'Diagram' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Illustrations used in manufacturing instructions. Stored as XML.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Illustration' , @level2type = N'COLUMN' , @level2name = N'Diagram' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.Illustration') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.Illustration')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Illustration' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'Illustration' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-44
CREATE TABLE Production.ProductDocument (ProductID int NOT NULL, DocumentNode hierarchyid NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductDocument_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductDocument_ProductID_DocumentNode PRIMARY KEY (ProductID, DocumentNode));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductDocument') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping products to related product documents.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDocument' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping products to related product documents.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDocument' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductDocument') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Production.ProductDocument')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDocument' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDocument' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductDocument') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DocumentNode' AND object_id = OBJECT_ID('Production.ProductDocument')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Document identification number. Foreign key to Document.DocumentNode.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDocument' , @level2type = N'COLUMN' , @level2name = N'DocumentNode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Document identification number. Foreign key to Document.DocumentNode.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDocument' , @level2type = N'COLUMN' , @level2name = N'DocumentNode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductDocument') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductDocument')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDocument' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductDocument' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-45
CREATE TABLE Production.ProductModelIllustration (ProductModelID int NOT NULL, IllustrationID int NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductModelIllustration_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductModelIllustration_ProductModelID_IllustrationID PRIMARY KEY (ProductModelID, IllustrationID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModelIllustration') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping product models and illustrations.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelIllustration' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping product models and illustrations.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelIllustration' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModelIllustration') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductModelID' AND object_id = OBJECT_ID('Production.ProductModelIllustration')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to ProductModel.ProductModelID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelIllustration' , @level2type = N'COLUMN' , @level2name = N'ProductModelID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to ProductModel.ProductModelID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelIllustration' , @level2type = N'COLUMN' , @level2name = N'ProductModelID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModelIllustration') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'IllustrationID' AND object_id = OBJECT_ID('Production.ProductModelIllustration')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Illustration.IllustrationID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelIllustration' , @level2type = N'COLUMN' , @level2name = N'IllustrationID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Illustration.IllustrationID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelIllustration' , @level2type = N'COLUMN' , @level2name = N'IllustrationID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModelIllustration') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductModelIllustration')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelIllustration' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelIllustration' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-46
CREATE TABLE Production.ProductModelProductDescriptionCulture (ProductModelID int NOT NULL, ProductDescriptionID int NOT NULL, CultureID nchar(6) NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductModelProductDescriptionCulture_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductModelProductDescriptionCulture_ProductModelID_ProductDescriptionID_CultureID PRIMARY KEY (ProductModelID, ProductDescriptionID, CultureID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModelProductDescriptionCulture') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping product descriptions and the language the description is written in.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelProductDescriptionCulture' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping product descriptions and the language the description is written in.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelProductDescriptionCulture' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModelProductDescriptionCulture') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductModelID' AND object_id = OBJECT_ID('Production.ProductModelProductDescriptionCulture')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to ProductModel.ProductModelID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelProductDescriptionCulture' , @level2type = N'COLUMN' , @level2name = N'ProductModelID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to ProductModel.ProductModelID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelProductDescriptionCulture' , @level2type = N'COLUMN' , @level2name = N'ProductModelID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModelProductDescriptionCulture') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductDescriptionID' AND object_id = OBJECT_ID('Production.ProductModelProductDescriptionCulture')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to ProductDescription.ProductDescriptionID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelProductDescriptionCulture' , @level2type = N'COLUMN' , @level2name = N'ProductDescriptionID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to ProductDescription.ProductDescriptionID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelProductDescriptionCulture' , @level2type = N'COLUMN' , @level2name = N'ProductDescriptionID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModelProductDescriptionCulture') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CultureID' AND object_id = OBJECT_ID('Production.ProductModelProductDescriptionCulture')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Culture identification number. Foreign key to Culture.CultureID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelProductDescriptionCulture' , @level2type = N'COLUMN' , @level2name = N'CultureID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Culture identification number. Foreign key to Culture.CultureID.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelProductDescriptionCulture' , @level2type = N'COLUMN' , @level2name = N'CultureID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductModelProductDescriptionCulture') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductModelProductDescriptionCulture')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelProductDescriptionCulture' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductModelProductDescriptionCulture' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-47
CREATE TABLE Production.ProductPhoto (ProductPhotoID int IDENTITY (1, 1) NOT NULL, ThumbNailPhoto varbinary(MAX), ThumbnailPhotoFileName nvarchar(50), LargePhoto varbinary(MAX), LargePhotoFileName nvarchar(50), ModifiedDate datetime CONSTRAINT DF_ProductPhoto_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductPhoto_ProductPhotoID PRIMARY KEY (ProductPhotoID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product images.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product images.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductPhotoID' AND object_id = OBJECT_ID('Production.ProductPhoto')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductPhoto records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ProductPhotoID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for ProductPhoto records.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ProductPhotoID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ThumbNailPhoto' AND object_id = OBJECT_ID('Production.ProductPhoto')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Small image of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ThumbNailPhoto' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Small image of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ThumbNailPhoto' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ThumbnailPhotoFileName' AND object_id = OBJECT_ID('Production.ProductPhoto')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Small image file name.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ThumbnailPhotoFileName' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Small image file name.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ThumbnailPhotoFileName' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'LargePhoto' AND object_id = OBJECT_ID('Production.ProductPhoto')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Large image of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'LargePhoto' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Large image of the product.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'LargePhoto' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'LargePhotoFileName' AND object_id = OBJECT_ID('Production.ProductPhoto')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Large image file name.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'LargePhotoFileName' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Large image file name.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'LargePhotoFileName' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.ProductPhoto') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Production.ProductPhoto')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'TABLE' , @level1name = N'ProductPhoto' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-48
CREATE TABLE Purchasing.ShipMethod (ShipMethodID int IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, ShipBase money CONSTRAINT DF_ShipMethod_ShipBase DEFAULT 0 NOT NULL, ShipRate money CONSTRAINT DF_ShipMethod_ShipRate DEFAULT 0 NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_ShipMethod_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_ShipMethod_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ShipMethod_ShipMethodID PRIMARY KEY (ShipMethodID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ShipMethod') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shipping company lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shipping company lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ShipMethod') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShipMethodID' AND object_id = OBJECT_ID('Purchasing.ShipMethod')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for ShipMethod records.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'ShipMethodID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for ShipMethod records.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'ShipMethodID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ShipMethod') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Purchasing.ShipMethod')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shipping company name.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shipping company name.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ShipMethod') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShipBase' AND object_id = OBJECT_ID('Purchasing.ShipMethod')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Minimum shipping charge.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'ShipBase' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Minimum shipping charge.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'ShipBase' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ShipMethod') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShipRate' AND object_id = OBJECT_ID('Purchasing.ShipMethod')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shipping charge per pound.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'ShipRate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shipping charge per pound.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'ShipRate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ShipMethod') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Purchasing.ShipMethod')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ShipMethod') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Purchasing.ShipMethod')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ShipMethod' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-49
CREATE TABLE Purchasing.ProductVendor (ProductID int NOT NULL, BusinessEntityID int NOT NULL, AverageLeadTime int NOT NULL, StandardPrice money NOT NULL, LastReceiptCost money, LastReceiptDate datetime, MinOrderQty int NOT NULL, MaxOrderQty int NOT NULL, OnOrderQty int, UnitMeasureCode nchar(3) NOT NULL, ModifiedDate datetime CONSTRAINT DF_ProductVendor_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ProductVendor_ProductID_BusinessEntityID PRIMARY KEY (ProductID, BusinessEntityID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping vendors with the products they supply.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping vendors with the products they supply.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Purchasing.ProductVendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Purchasing.ProductVendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Vendor.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to Vendor.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AverageLeadTime' AND object_id = OBJECT_ID('Purchasing.ProductVendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'The average span of time (in days) between placing an order with the vendor and receiving the purchased product.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'AverageLeadTime' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'The average span of time (in days) between placing an order with the vendor and receiving the purchased product.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'AverageLeadTime' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StandardPrice' AND object_id = OBJECT_ID('Purchasing.ProductVendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'The vendor''s usual selling price.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'StandardPrice' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'The vendor''s usual selling price.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'StandardPrice' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'LastReceiptCost' AND object_id = OBJECT_ID('Purchasing.ProductVendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'The selling price when last purchased.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'LastReceiptCost' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'The selling price when last purchased.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'LastReceiptCost' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'LastReceiptDate' AND object_id = OBJECT_ID('Purchasing.ProductVendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the product was last received by the vendor.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'LastReceiptDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the product was last received by the vendor.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'LastReceiptDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'MinOrderQty' AND object_id = OBJECT_ID('Purchasing.ProductVendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'The maximum quantity that should be ordered.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'MinOrderQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'The maximum quantity that should be ordered.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'MinOrderQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'MaxOrderQty' AND object_id = OBJECT_ID('Purchasing.ProductVendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'The minimum quantity that should be ordered.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'MaxOrderQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'The minimum quantity that should be ordered.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'MaxOrderQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'OnOrderQty' AND object_id = OBJECT_ID('Purchasing.ProductVendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'The quantity currently on order.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'OnOrderQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'The quantity currently on order.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'OnOrderQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'UnitMeasureCode' AND object_id = OBJECT_ID('Purchasing.ProductVendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'The product''s unit of measure.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'UnitMeasureCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'The product''s unit of measure.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'UnitMeasureCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.ProductVendor') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Purchasing.ProductVendor')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'ProductVendor' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-50
CREATE TABLE Purchasing.PurchaseOrderDetail (PurchaseOrderID int NOT NULL, PurchaseOrderDetailID int IDENTITY (1, 1) NOT NULL, DueDate datetime NOT NULL, OrderQty smallint NOT NULL, ProductID int NOT NULL, UnitPrice money NOT NULL, LineTotal money NOT NULL, ReceivedQty decimal(8, 2) NOT NULL, RejectedQty decimal(8, 2) NOT NULL, StockedQty decimal(9, 2) NOT NULL, ModifiedDate datetime CONSTRAINT DF_PurchaseOrderDetail_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID PRIMARY KEY (PurchaseOrderID, PurchaseOrderDetailID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Individual products associated with a specific purchase order. See PurchaseOrderHeader.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Individual products associated with a specific purchase order. See PurchaseOrderHeader.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PurchaseOrderID' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'PurchaseOrderID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'PurchaseOrderID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PurchaseOrderDetailID' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. One line number per purchased product.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'PurchaseOrderDetailID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. One line number per purchased product.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'PurchaseOrderDetailID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DueDate' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the product is expected to be received.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'DueDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the product is expected to be received.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'DueDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'OrderQty' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Quantity ordered.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'OrderQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Quantity ordered.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'OrderQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'UnitPrice' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Vendor''s selling price of a single product.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'UnitPrice' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Vendor''s selling price of a single product.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'UnitPrice' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'LineTotal' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Per product subtotal. Computed as OrderQty * UnitPrice.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'LineTotal' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Per product subtotal. Computed as OrderQty * UnitPrice.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'LineTotal' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ReceivedQty' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Quantity actually received from the vendor.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'ReceivedQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Quantity actually received from the vendor.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'ReceivedQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'RejectedQty' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Quantity rejected during inspection.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'RejectedQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Quantity rejected during inspection.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'RejectedQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StockedQty' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Quantity accepted into inventory. Computed as ReceivedQty - RejectedQty.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'StockedQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Quantity accepted into inventory. Computed as ReceivedQty - RejectedQty.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'StockedQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderDetail' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-51
CREATE TABLE Purchasing.PurchaseOrderHeader (PurchaseOrderID int IDENTITY (1, 1) NOT NULL, RevisionNumber tinyint CONSTRAINT DF_PurchaseOrderHeader_RevisionNumber DEFAULT 0 NOT NULL, Status tinyint CONSTRAINT DF_PurchaseOrderHeader_Status DEFAULT 1 NOT NULL, EmployeeID int NOT NULL, VendorID int NOT NULL, ShipMethodID int NOT NULL, OrderDate datetime CONSTRAINT DF_PurchaseOrderHeader_OrderDate DEFAULT GETDATE() NOT NULL, ShipDate datetime, SubTotal money CONSTRAINT DF_PurchaseOrderHeader_SubTotal DEFAULT 0 NOT NULL, TaxAmt money CONSTRAINT DF_PurchaseOrderHeader_TaxAmt DEFAULT 0 NOT NULL, Freight money CONSTRAINT DF_PurchaseOrderHeader_Freight DEFAULT 0 NOT NULL, TotalDue money NOT NULL, ModifiedDate datetime CONSTRAINT DF_PurchaseOrderHeader_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_PurchaseOrderHeader_PurchaseOrderID PRIMARY KEY (PurchaseOrderID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'General purchase order information. See PurchaseOrderDetail.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'General purchase order information. See PurchaseOrderDetail.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PurchaseOrderID' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'PurchaseOrderID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'PurchaseOrderID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'RevisionNumber' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Incremental number to track changes to the purchase order over time.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'RevisionNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Incremental number to track changes to the purchase order over time.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'RevisionNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Status' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'Status' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'Status' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EmployeeID' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'EmployeeID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'EmployeeID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'VendorID' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'VendorID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'VendorID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShipMethodID' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shipping method. Foreign key to ShipMethod.ShipMethodID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ShipMethodID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shipping method. Foreign key to ShipMethod.ShipMethodID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ShipMethodID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'OrderDate' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Purchase order creation date.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'OrderDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Purchase order creation date.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'OrderDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShipDate' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Estimated shipment date from the vendor.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ShipDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Estimated shipment date from the vendor.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ShipDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SubTotal' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'SubTotal' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'SubTotal' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TaxAmt' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Tax amount.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'TaxAmt' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Tax amount.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'TaxAmt' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Freight' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shipping cost.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'Freight' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shipping cost.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'Freight' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TotalDue' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Total due to vendor. Computed as Subtotal + TaxAmt + Freight.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'TotalDue' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Total due to vendor. Computed as Subtotal + TaxAmt + Freight.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'TotalDue' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.PurchaseOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Purchasing.PurchaseOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'TABLE' , @level1name = N'PurchaseOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-52
CREATE TABLE Sales.CreditCard (CreditCardID int IDENTITY (1, 1) NOT NULL, CardType nvarchar(50) NOT NULL, CardNumber nvarchar(25) NOT NULL, ExpMonth tinyint NOT NULL, ExpYear smallint NOT NULL, ModifiedDate datetime CONSTRAINT DF_CreditCard_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_CreditCard_CreditCardID PRIMARY KEY (CreditCardID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CreditCard') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Customer credit card information.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Customer credit card information.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CreditCard') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CreditCardID' AND object_id = OBJECT_ID('Sales.CreditCard')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for CreditCard records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'CreditCardID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for CreditCard records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'CreditCardID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CreditCard') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CardType' AND object_id = OBJECT_ID('Sales.CreditCard')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Credit card name.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'CardType' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Credit card name.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'CardType' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CreditCard') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CardNumber' AND object_id = OBJECT_ID('Sales.CreditCard')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Credit card number.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'CardNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Credit card number.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'CardNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CreditCard') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ExpMonth' AND object_id = OBJECT_ID('Sales.CreditCard')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Credit card expiration month.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'ExpMonth' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Credit card expiration month.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'ExpMonth' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CreditCard') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ExpYear' AND object_id = OBJECT_ID('Sales.CreditCard')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Credit card expiration year.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'ExpYear' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Credit card expiration year.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'ExpYear' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CreditCard') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.CreditCard')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CreditCard' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-53
CREATE TABLE Sales.Currency (CurrencyCode nchar(3) NOT NULL, Name Name NOT NULL, ModifiedDate datetime CONSTRAINT DF_Currency_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_Currency_CurrencyCode PRIMARY KEY (CurrencyCode));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Currency') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Lookup table containing standard ISO currencies.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Currency' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Lookup table containing standard ISO currencies.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Currency' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Currency') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CurrencyCode' AND object_id = OBJECT_ID('Sales.Currency')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'The ISO code for the Currency.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Currency' , @level2type = N'COLUMN' , @level2name = N'CurrencyCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'The ISO code for the Currency.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Currency' , @level2type = N'COLUMN' , @level2name = N'CurrencyCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Currency') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Sales.Currency')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Currency name.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Currency' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Currency name.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Currency' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.Currency') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.Currency')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Currency' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'Currency' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-54
CREATE TABLE Sales.CurrencyRate (CurrencyRateID int IDENTITY (1, 1) NOT NULL, CurrencyRateDate datetime NOT NULL, FromCurrencyCode nchar(3) NOT NULL, ToCurrencyCode nchar(3) NOT NULL, AverageRate money NOT NULL, EndOfDayRate money NOT NULL, ModifiedDate datetime CONSTRAINT DF_CurrencyRate_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_CurrencyRate_CurrencyRateID PRIMARY KEY (CurrencyRateID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CurrencyRate') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Currency exchange rates.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Currency exchange rates.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CurrencyRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CurrencyRateID' AND object_id = OBJECT_ID('Sales.CurrencyRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for CurrencyRate records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'CurrencyRateID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for CurrencyRate records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'CurrencyRateID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CurrencyRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CurrencyRateDate' AND object_id = OBJECT_ID('Sales.CurrencyRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the exchange rate was obtained.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'CurrencyRateDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the exchange rate was obtained.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'CurrencyRateDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CurrencyRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'FromCurrencyCode' AND object_id = OBJECT_ID('Sales.CurrencyRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Exchange rate was converted from this currency code.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'FromCurrencyCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Exchange rate was converted from this currency code.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'FromCurrencyCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CurrencyRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ToCurrencyCode' AND object_id = OBJECT_ID('Sales.CurrencyRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Exchange rate was converted to this currency code.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'ToCurrencyCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Exchange rate was converted to this currency code.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'ToCurrencyCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CurrencyRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AverageRate' AND object_id = OBJECT_ID('Sales.CurrencyRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Average exchange rate for the day.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'AverageRate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Average exchange rate for the day.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'AverageRate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CurrencyRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EndOfDayRate' AND object_id = OBJECT_ID('Sales.CurrencyRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Final exchange rate for the day.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'EndOfDayRate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Final exchange rate for the day.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'EndOfDayRate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CurrencyRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.CurrencyRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CurrencyRate' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-55
CREATE TABLE Sales.SalesOrderDetail (SalesOrderID int NOT NULL, SalesOrderDetailID int IDENTITY (1, 1) NOT NULL, CarrierTrackingNumber nvarchar(25), OrderQty smallint NOT NULL, ProductID int NOT NULL, SpecialOfferID int NOT NULL, UnitPrice money NOT NULL, UnitPriceDiscount money CONSTRAINT DF_SalesOrderDetail_UnitPriceDiscount DEFAULT 0 NOT NULL, LineTotal numeric(38, 6) NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_SalesOrderDetail_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_SalesOrderDetail_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID PRIMARY KEY (SalesOrderID, SalesOrderDetailID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Individual products associated with a specific sales order. See SalesOrderHeader.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Individual products associated with a specific sales order. See SalesOrderHeader.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesOrderID' AND object_id = OBJECT_ID('Sales.SalesOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to SalesOrderHeader.SalesOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'SalesOrderID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to SalesOrderHeader.SalesOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'SalesOrderID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesOrderDetailID' AND object_id = OBJECT_ID('Sales.SalesOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. One incremental unique number per product sold.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'SalesOrderDetailID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. One incremental unique number per product sold.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'SalesOrderDetailID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CarrierTrackingNumber' AND object_id = OBJECT_ID('Sales.SalesOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shipment tracking number supplied by the shipper.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'CarrierTrackingNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shipment tracking number supplied by the shipper.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'CarrierTrackingNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'OrderQty' AND object_id = OBJECT_ID('Sales.SalesOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Quantity ordered per product.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'OrderQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Quantity ordered per product.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'OrderQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Sales.SalesOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product sold to customer. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product sold to customer. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SpecialOfferID' AND object_id = OBJECT_ID('Sales.SalesOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Promotional code. Foreign key to SpecialOffer.SpecialOfferID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'SpecialOfferID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Promotional code. Foreign key to SpecialOffer.SpecialOfferID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'SpecialOfferID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'UnitPrice' AND object_id = OBJECT_ID('Sales.SalesOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Selling price of a single product.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'UnitPrice' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Selling price of a single product.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'UnitPrice' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'UnitPriceDiscount' AND object_id = OBJECT_ID('Sales.SalesOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Discount amount.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'UnitPriceDiscount' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Discount amount.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'UnitPriceDiscount' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'LineTotal' AND object_id = OBJECT_ID('Sales.SalesOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'LineTotal' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'LineTotal' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Sales.SalesOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderDetail') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.SalesOrderDetail')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderDetail' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-56
CREATE TABLE Sales.SalesOrderHeader (SalesOrderID int IDENTITY (1, 1) NOT NULL, RevisionNumber tinyint CONSTRAINT DF_SalesOrderHeader_RevisionNumber DEFAULT 0 NOT NULL, OrderDate datetime CONSTRAINT DF_SalesOrderHeader_OrderDate DEFAULT GETDATE() NOT NULL, DueDate datetime NOT NULL, ShipDate datetime, Status tinyint CONSTRAINT DF_SalesOrderHeader_Status DEFAULT 1 NOT NULL, OnlineOrderFlag Flag(1) CONSTRAINT DF_SalesOrderHeader_OnlineOrderFlag DEFAULT 1 NOT NULL, SalesOrderNumber nvarchar(25) NOT NULL, PurchaseOrderNumber OrderNumber, AccountNumber AccountNumber, CustomerID int NOT NULL, SalesPersonID int, TerritoryID int, BillToAddressID int NOT NULL, ShipToAddressID int NOT NULL, ShipMethodID int NOT NULL, CreditCardID int, CreditCardApprovalCode varchar(15), CurrencyRateID int, SubTotal money CONSTRAINT DF_SalesOrderHeader_SubTotal DEFAULT 0 NOT NULL, TaxAmt money CONSTRAINT DF_SalesOrderHeader_TaxAmt DEFAULT 0 NOT NULL, Freight money CONSTRAINT DF_SalesOrderHeader_Freight DEFAULT 0 NOT NULL, TotalDue money NOT NULL, Comment nvarchar(128), rowguid uniqueidentifier CONSTRAINT DF_SalesOrderHeader_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_SalesOrderHeader_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_SalesOrderHeader_SalesOrderID PRIMARY KEY (SalesOrderID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'General sales order information.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'General sales order information.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesOrderID' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'SalesOrderID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'SalesOrderID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'RevisionNumber' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Incremental number to track changes to the sales order over time.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'RevisionNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Incremental number to track changes to the sales order over time.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'RevisionNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'OrderDate' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Dates the sales order was created.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'OrderDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Dates the sales order was created.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'OrderDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DueDate' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the order is due to the customer.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'DueDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the order is due to the customer.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'DueDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShipDate' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the order was shipped to the customer.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ShipDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the order was shipped to the customer.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ShipDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Status' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'Status' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'Status' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'OnlineOrderFlag' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'0 = Order placed by sales person. 1 = Order placed online by customer.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'OnlineOrderFlag' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'0 = Order placed by sales person. 1 = Order placed online by customer.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'OnlineOrderFlag' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesOrderNumber' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Unique sales order identification number.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'SalesOrderNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Unique sales order identification number.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'SalesOrderNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'PurchaseOrderNumber' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Customer purchase order number reference.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'PurchaseOrderNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Customer purchase order number reference.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'PurchaseOrderNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'AccountNumber' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Financial accounting number reference.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'AccountNumber' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Financial accounting number reference.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'AccountNumber' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CustomerID' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Customer identification number. Foreign key to Customer.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'CustomerID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Customer identification number. Foreign key to Customer.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'CustomerID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesPersonID' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'SalesPersonID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'SalesPersonID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TerritoryID' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BillToAddressID' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Customer billing address. Foreign key to Address.AddressID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'BillToAddressID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Customer billing address. Foreign key to Address.AddressID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'BillToAddressID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShipToAddressID' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Customer shipping address. Foreign key to Address.AddressID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ShipToAddressID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Customer shipping address. Foreign key to Address.AddressID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ShipToAddressID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShipMethodID' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shipping method. Foreign key to ShipMethod.ShipMethodID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ShipMethodID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shipping method. Foreign key to ShipMethod.ShipMethodID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ShipMethodID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CreditCardID' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Credit card identification number. Foreign key to CreditCard.CreditCardID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'CreditCardID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Credit card identification number. Foreign key to CreditCard.CreditCardID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'CreditCardID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CreditCardApprovalCode' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Approval code provided by the credit card company.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'CreditCardApprovalCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Approval code provided by the credit card company.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'CreditCardApprovalCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CurrencyRateID' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'CurrencyRateID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'CurrencyRateID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SubTotal' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'SubTotal' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'SubTotal' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TaxAmt' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Tax amount.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'TaxAmt' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Tax amount.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'TaxAmt' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Freight' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shipping cost.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'Freight' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shipping cost.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'Freight' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TotalDue' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Total due from customer. Computed as Subtotal + TaxAmt + Freight.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'TotalDue' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Total due from customer. Computed as Subtotal + TaxAmt + Freight.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'TotalDue' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Comment' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales representative comments.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'Comment' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales representative comments.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'Comment' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeader') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.SalesOrderHeader')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeader' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-57
CREATE TABLE Sales.SalesPerson (BusinessEntityID int NOT NULL, TerritoryID int, SalesQuota money, Bonus money CONSTRAINT DF_SalesPerson_Bonus DEFAULT 0 NOT NULL, CommissionPct smallmoney CONSTRAINT DF_SalesPerson_CommissionPct DEFAULT 0 NOT NULL, SalesYTD money CONSTRAINT DF_SalesPerson_SalesYTD DEFAULT 0 NOT NULL, SalesLastYear money CONSTRAINT DF_SalesPerson_SalesLastYear DEFAULT 0 NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_SalesPerson_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_SalesPerson_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_SalesPerson_BusinessEntityID PRIMARY KEY (BusinessEntityID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPerson') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales representative current information.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales representative current information.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPerson') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Sales.SalesPerson')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPerson') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TerritoryID' AND object_id = OBJECT_ID('Sales.SalesPerson')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPerson') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesQuota' AND object_id = OBJECT_ID('Sales.SalesPerson')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Projected yearly sales.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'SalesQuota' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Projected yearly sales.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'SalesQuota' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPerson') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Bonus' AND object_id = OBJECT_ID('Sales.SalesPerson')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Bonus due if quota is met.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'Bonus' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Bonus due if quota is met.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'Bonus' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPerson') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CommissionPct' AND object_id = OBJECT_ID('Sales.SalesPerson')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Commision percent received per sale.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'CommissionPct' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Commision percent received per sale.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'CommissionPct' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPerson') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesYTD' AND object_id = OBJECT_ID('Sales.SalesPerson')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales total year to date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'SalesYTD' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales total year to date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'SalesYTD' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPerson') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesLastYear' AND object_id = OBJECT_ID('Sales.SalesPerson')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales total of previous year.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'SalesLastYear' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales total of previous year.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'SalesLastYear' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPerson') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Sales.SalesPerson')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPerson') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.SalesPerson')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPerson' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-58
CREATE TABLE Sales.SalesPersonQuotaHistory (BusinessEntityID int NOT NULL, QuotaDate datetime NOT NULL, SalesQuota money NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_SalesPersonQuotaHistory_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_SalesPersonQuotaHistory_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate PRIMARY KEY (BusinessEntityID, QuotaDate));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPersonQuotaHistory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales performance tracking.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales performance tracking.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPersonQuotaHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Sales.SalesPersonQuotaHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales person identification number. Foreign key to SalesPerson.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales person identification number. Foreign key to SalesPerson.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPersonQuotaHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'QuotaDate' AND object_id = OBJECT_ID('Sales.SalesPersonQuotaHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales quota date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' , @level2type = N'COLUMN' , @level2name = N'QuotaDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales quota date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' , @level2type = N'COLUMN' , @level2name = N'QuotaDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPersonQuotaHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesQuota' AND object_id = OBJECT_ID('Sales.SalesPersonQuotaHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales quota amount.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' , @level2type = N'COLUMN' , @level2name = N'SalesQuota' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales quota amount.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' , @level2type = N'COLUMN' , @level2name = N'SalesQuota' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPersonQuotaHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Sales.SalesPersonQuotaHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesPersonQuotaHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.SalesPersonQuotaHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesPersonQuotaHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-59
CREATE TABLE Sales.SalesTaxRate (SalesTaxRateID int IDENTITY (1, 1) NOT NULL, StateProvinceID int NOT NULL, TaxType tinyint NOT NULL, TaxRate smallmoney CONSTRAINT DF_SalesTaxRate_TaxRate DEFAULT 0 NOT NULL, Name Name NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_SalesTaxRate_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_SalesTaxRate_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_SalesTaxRate_SalesTaxRateID PRIMARY KEY (SalesTaxRateID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTaxRate') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Tax rate lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Tax rate lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTaxRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesTaxRateID' AND object_id = OBJECT_ID('Sales.SalesTaxRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for SalesTaxRate records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'SalesTaxRateID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for SalesTaxRate records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'SalesTaxRateID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTaxRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StateProvinceID' AND object_id = OBJECT_ID('Sales.SalesTaxRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'State, province, or country/region the sales tax applies to.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'StateProvinceID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'State, province, or country/region the sales tax applies to.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'StateProvinceID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTaxRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TaxType' AND object_id = OBJECT_ID('Sales.SalesTaxRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'TaxType' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'TaxType' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTaxRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TaxRate' AND object_id = OBJECT_ID('Sales.SalesTaxRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Tax rate amount.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'TaxRate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Tax rate amount.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'TaxRate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTaxRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Sales.SalesTaxRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Tax rate description.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Tax rate description.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTaxRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Sales.SalesTaxRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTaxRate') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.SalesTaxRate')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTaxRate' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-60
CREATE TABLE Sales.SalesTerritory (TerritoryID int IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, CountryRegionCode nvarchar(3) NOT NULL, [Group] nvarchar(50) NOT NULL, SalesYTD money CONSTRAINT DF_SalesTerritory_SalesYTD DEFAULT 0 NOT NULL, SalesLastYear money CONSTRAINT DF_SalesTerritory_SalesLastYear DEFAULT 0 NOT NULL, CostYTD money CONSTRAINT DF_SalesTerritory_CostYTD DEFAULT 0 NOT NULL, CostLastYear money CONSTRAINT DF_SalesTerritory_CostLastYear DEFAULT 0 NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_SalesTerritory_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_SalesTerritory_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_SalesTerritory_TerritoryID PRIMARY KEY (TerritoryID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales territory lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales territory lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TerritoryID' AND object_id = OBJECT_ID('Sales.SalesTerritory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for SalesTerritory records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for SalesTerritory records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Sales.SalesTerritory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales territory description' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales territory description' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CountryRegionCode' AND object_id = OBJECT_ID('Sales.SalesTerritory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'CountryRegionCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'CountryRegionCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Group' AND object_id = OBJECT_ID('Sales.SalesTerritory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Geographic area to which the sales territory belong.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'Group' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Geographic area to which the sales territory belong.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'Group' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesYTD' AND object_id = OBJECT_ID('Sales.SalesTerritory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales in the territory year to date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'SalesYTD' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales in the territory year to date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'SalesYTD' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesLastYear' AND object_id = OBJECT_ID('Sales.SalesTerritory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales in the territory the previous year.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'SalesLastYear' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales in the territory the previous year.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'SalesLastYear' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CostYTD' AND object_id = OBJECT_ID('Sales.SalesTerritory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Business costs in the territory year to date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'CostYTD' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Business costs in the territory year to date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'CostYTD' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CostLastYear' AND object_id = OBJECT_ID('Sales.SalesTerritory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Business costs in the territory the previous year.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'CostLastYear' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Business costs in the territory the previous year.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'CostLastYear' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Sales.SalesTerritory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.SalesTerritory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-61
CREATE TABLE Sales.SalesTerritoryHistory (BusinessEntityID int NOT NULL, TerritoryID int NOT NULL, StartDate datetime NOT NULL, EndDate datetime, rowguid uniqueidentifier CONSTRAINT DF_SalesTerritoryHistory_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_SalesTerritoryHistory_ModifiedDate DEFAULT GETDATE() NOT NULL);
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritoryHistory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales representative transfers to other sales territories.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales representative transfers to other sales territories.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritoryHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Sales.SalesTerritoryHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritoryHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'TerritoryID' AND object_id = OBJECT_ID('Sales.SalesTerritoryHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'TerritoryID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritoryHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StartDate' AND object_id = OBJECT_ID('Sales.SalesTerritoryHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Date the sales representive started work in the territory.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'StartDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Date the sales representive started work in the territory.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'StartDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritoryHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EndDate' AND object_id = OBJECT_ID('Sales.SalesTerritoryHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the sales representative left work in the territory.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'EndDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the sales representative left work in the territory.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'EndDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritoryHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Sales.SalesTerritoryHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesTerritoryHistory') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.SalesTerritoryHistory')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesTerritoryHistory' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-62
CREATE TABLE Sales.SpecialOffer (SpecialOfferID int IDENTITY (1, 1) NOT NULL, Description nvarchar(255) NOT NULL, DiscountPct smallmoney CONSTRAINT DF_SpecialOffer_DiscountPct DEFAULT 0 NOT NULL, Type nvarchar(50) NOT NULL, Category nvarchar(50) NOT NULL, StartDate datetime NOT NULL, EndDate datetime NOT NULL, MinQty int CONSTRAINT DF_SpecialOffer_MinQty DEFAULT 0 NOT NULL, MaxQty int, rowguid uniqueidentifier CONSTRAINT DF_SpecialOffer_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_SpecialOffer_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_SpecialOffer_SpecialOfferID PRIMARY KEY (SpecialOfferID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sale discounts lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sale discounts lookup table.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SpecialOfferID' AND object_id = OBJECT_ID('Sales.SpecialOffer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for SpecialOffer records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'SpecialOfferID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for SpecialOffer records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'SpecialOfferID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Description' AND object_id = OBJECT_ID('Sales.SpecialOffer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Discount description.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'Description' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Discount description.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'Description' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DiscountPct' AND object_id = OBJECT_ID('Sales.SpecialOffer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Discount precentage.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'DiscountPct' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Discount precentage.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'DiscountPct' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Type' AND object_id = OBJECT_ID('Sales.SpecialOffer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Discount type category.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'Type' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Discount type category.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'Type' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Category' AND object_id = OBJECT_ID('Sales.SpecialOffer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Group the discount applies to such as Reseller or Customer.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'Category' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Group the discount applies to such as Reseller or Customer.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'Category' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'StartDate' AND object_id = OBJECT_ID('Sales.SpecialOffer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Discount start date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'StartDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Discount start date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'StartDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'EndDate' AND object_id = OBJECT_ID('Sales.SpecialOffer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Discount end date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'EndDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Discount end date.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'EndDate' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'MinQty' AND object_id = OBJECT_ID('Sales.SpecialOffer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Minimum discount percent allowed.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'MinQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Minimum discount percent allowed.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'MinQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'MaxQty' AND object_id = OBJECT_ID('Sales.SpecialOffer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Maximum discount percent allowed.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'MaxQty' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Maximum discount percent allowed.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'MaxQty' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Sales.SpecialOffer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOffer') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.SpecialOffer')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOffer' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-63
CREATE TABLE Sales.SpecialOfferProduct (SpecialOfferID int NOT NULL, ProductID int NOT NULL, rowguid uniqueidentifier CONSTRAINT DF_SpecialOfferProduct_rowguid DEFAULT newid() NOT NULL, ModifiedDate datetime CONSTRAINT DF_SpecialOfferProduct_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_SpecialOfferProduct_SpecialOfferID_ProductID PRIMARY KEY (SpecialOfferID, ProductID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOfferProduct') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping products to special offer discounts.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOfferProduct' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping products to special offer discounts.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOfferProduct' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOfferProduct') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SpecialOfferID' AND object_id = OBJECT_ID('Sales.SpecialOfferProduct')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for SpecialOfferProduct records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOfferProduct' , @level2type = N'COLUMN' , @level2name = N'SpecialOfferID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for SpecialOfferProduct records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOfferProduct' , @level2type = N'COLUMN' , @level2name = N'SpecialOfferID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOfferProduct') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Sales.SpecialOfferProduct')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOfferProduct' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product identification number. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOfferProduct' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOfferProduct') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'rowguid' AND object_id = OBJECT_ID('Sales.SpecialOfferProduct')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOfferProduct' , @level2type = N'COLUMN' , @level2name = N'rowguid' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOfferProduct' , @level2type = N'COLUMN' , @level2name = N'rowguid' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SpecialOfferProduct') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.SpecialOfferProduct')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOfferProduct' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SpecialOfferProduct' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-64
CREATE TABLE Sales.ShoppingCartItem (ShoppingCartItemID int IDENTITY (1, 1) NOT NULL, ShoppingCartID nvarchar(50) NOT NULL, Quantity int CONSTRAINT DF_ShoppingCartItem_Quantity DEFAULT 1 NOT NULL, ProductID int NOT NULL, DateCreated datetime CONSTRAINT DF_ShoppingCartItem_DateCreated DEFAULT GETDATE() NOT NULL, ModifiedDate datetime CONSTRAINT DF_ShoppingCartItem_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_ShoppingCartItem_ShoppingCartItemID PRIMARY KEY (ShoppingCartItemID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.ShoppingCartItem') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Contains online customer orders until the order is submitted or cancelled.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Contains online customer orders until the order is submitted or cancelled.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.ShoppingCartItem') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShoppingCartItemID' AND object_id = OBJECT_ID('Sales.ShoppingCartItem')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for ShoppingCartItem records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'ShoppingCartItemID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for ShoppingCartItem records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'ShoppingCartItemID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.ShoppingCartItem') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ShoppingCartID' AND object_id = OBJECT_ID('Sales.ShoppingCartItem')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Shopping cart identification number.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'ShoppingCartID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Shopping cart identification number.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'ShoppingCartID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.ShoppingCartItem') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Quantity' AND object_id = OBJECT_ID('Sales.ShoppingCartItem')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product quantity ordered.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'Quantity' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product quantity ordered.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'Quantity' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.ShoppingCartItem') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ProductID' AND object_id = OBJECT_ID('Sales.ShoppingCartItem')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product ordered. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'ProductID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product ordered. Foreign key to Product.ProductID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'ProductID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.ShoppingCartItem') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'DateCreated' AND object_id = OBJECT_ID('Sales.ShoppingCartItem')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date the time the record was created.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'DateCreated' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date the time the record was created.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'DateCreated' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.ShoppingCartItem') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.ShoppingCartItem')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'ShoppingCartItem' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-65
CREATE TABLE Sales.CountryRegionCurrency (CountryRegionCode nvarchar(3) NOT NULL, CurrencyCode nchar(3) NOT NULL, ModifiedDate datetime CONSTRAINT DF_CountryRegionCurrency_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode PRIMARY KEY (CountryRegionCode, CurrencyCode));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CountryRegionCurrency') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping ISO currency codes to a country or region.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CountryRegionCurrency' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping ISO currency codes to a country or region.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CountryRegionCurrency' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CountryRegionCurrency') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CountryRegionCode' AND object_id = OBJECT_ID('Sales.CountryRegionCurrency')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CountryRegionCurrency' , @level2type = N'COLUMN' , @level2name = N'CountryRegionCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CountryRegionCurrency' , @level2type = N'COLUMN' , @level2name = N'CountryRegionCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CountryRegionCurrency') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CurrencyCode' AND object_id = OBJECT_ID('Sales.CountryRegionCurrency')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'ISO standard currency code. Foreign key to Currency.CurrencyCode.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CountryRegionCurrency' , @level2type = N'COLUMN' , @level2name = N'CurrencyCode' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'ISO standard currency code. Foreign key to Currency.CurrencyCode.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CountryRegionCurrency' , @level2type = N'COLUMN' , @level2name = N'CurrencyCode' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.CountryRegionCurrency') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.CountryRegionCurrency')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CountryRegionCurrency' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'CountryRegionCurrency' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-66
CREATE TABLE Sales.PersonCreditCard (BusinessEntityID int NOT NULL, CreditCardID int NOT NULL, ModifiedDate datetime CONSTRAINT DF_PersonCreditCard_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_PersonCreditCard_BusinessEntityID_CreditCardID PRIMARY KEY (BusinessEntityID, CreditCardID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.PersonCreditCard') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping people to their credit card information in the CreditCard table.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'PersonCreditCard' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping people to their credit card information in the CreditCard table.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'PersonCreditCard' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.PersonCreditCard') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'BusinessEntityID' AND object_id = OBJECT_ID('Sales.PersonCreditCard')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Business entity identification number. Foreign key to Person.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'PersonCreditCard' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Business entity identification number. Foreign key to Person.BusinessEntityID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'PersonCreditCard' , @level2type = N'COLUMN' , @level2name = N'BusinessEntityID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.PersonCreditCard') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'CreditCardID' AND object_id = OBJECT_ID('Sales.PersonCreditCard')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Credit card identification number. Foreign key to CreditCard.CreditCardID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'PersonCreditCard' , @level2type = N'COLUMN' , @level2name = N'CreditCardID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Credit card identification number. Foreign key to CreditCard.CreditCardID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'PersonCreditCard' , @level2type = N'COLUMN' , @level2name = N'CreditCardID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.PersonCreditCard') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.PersonCreditCard')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'PersonCreditCard' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'PersonCreditCard' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-67
CREATE TABLE Sales.SalesOrderHeaderSalesReason (SalesOrderID int NOT NULL, SalesReasonID int NOT NULL, ModifiedDate datetime CONSTRAINT DF_SalesOrderHeaderSalesReason_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID PRIMARY KEY (SalesOrderID, SalesReasonID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeaderSalesReason') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping sales orders to sales reason codes.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeaderSalesReason' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Cross-reference table mapping sales orders to sales reason codes.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeaderSalesReason' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeaderSalesReason') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesOrderID' AND object_id = OBJECT_ID('Sales.SalesOrderHeaderSalesReason')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to SalesOrderHeader.SalesOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeaderSalesReason' , @level2type = N'COLUMN' , @level2name = N'SalesOrderID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to SalesOrderHeader.SalesOrderID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeaderSalesReason' , @level2type = N'COLUMN' , @level2name = N'SalesOrderID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeaderSalesReason') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesReasonID' AND object_id = OBJECT_ID('Sales.SalesOrderHeaderSalesReason')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to SalesReason.SalesReasonID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeaderSalesReason' , @level2type = N'COLUMN' , @level2name = N'SalesReasonID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key. Foreign key to SalesReason.SalesReasonID.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeaderSalesReason' , @level2type = N'COLUMN' , @level2name = N'SalesReasonID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesOrderHeaderSalesReason') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.SalesOrderHeaderSalesReason')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeaderSalesReason' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesOrderHeaderSalesReason' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-68
CREATE TABLE Sales.SalesReason (SalesReasonID int IDENTITY (1, 1) NOT NULL, Name Name NOT NULL, ReasonType Name NOT NULL, ModifiedDate datetime CONSTRAINT DF_SalesReason_ModifiedDate DEFAULT GETDATE() NOT NULL, CONSTRAINT PK_SalesReason_SalesReasonID PRIMARY KEY (SalesReasonID));
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesReason') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Lookup table of customer purchase reasons.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesReason' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Lookup table of customer purchase reasons.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesReason' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesReason') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'SalesReasonID' AND object_id = OBJECT_ID('Sales.SalesReason')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Primary key for SalesReason records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesReason' , @level2type = N'COLUMN' , @level2name = N'SalesReasonID' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Primary key for SalesReason records.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesReason' , @level2type = N'COLUMN' , @level2name = N'SalesReasonID' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesReason') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'Name' AND object_id = OBJECT_ID('Sales.SalesReason')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales reason description.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesReason' , @level2type = N'COLUMN' , @level2name = N'Name' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales reason description.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesReason' , @level2type = N'COLUMN' , @level2name = N'Name' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesReason') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ReasonType' AND object_id = OBJECT_ID('Sales.SalesReason')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Category the sales reason belongs to.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesReason' , @level2type = N'COLUMN' , @level2name = N'ReasonType' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Category the sales reason belongs to.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesReason' , @level2type = N'COLUMN' , @level2name = N'ReasonType' END;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.SalesReason') AND name = N'MS_DESCRIPTION' AND minor_id = ( SELECT column_id FROM sys.columns WHERE name = 'ModifiedDate' AND object_id = OBJECT_ID('Sales.SalesReason')) ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesReason' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Date and time the record was last updated.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'TABLE' , @level1name = N'SalesReason' , @level2type = N'COLUMN' , @level2name = N'ModifiedDate' END;

-- changeset JamesBennett:1727463743285-69
CREATE UNIQUE NONCLUSTERED INDEX AK_BusinessEntityContact_rowguid ON Person.BusinessEntityContact(rowguid);

-- changeset JamesBennett:1727463743285-70
CREATE NONCLUSTERED INDEX IX_BusinessEntityContact_ContactTypeID ON Person.BusinessEntityContact(ContactTypeID);

-- changeset JamesBennett:1727463743285-71
CREATE NONCLUSTERED INDEX IX_BusinessEntityContact_PersonID ON Person.BusinessEntityContact(PersonID);

-- changeset JamesBennett:1727463743285-72
CREATE VIEW Purchasing.vVendorWithContacts AS SELECT 
    v.[BusinessEntityID]
    ,v.[Name]
    ,ct.[Name] AS [ContactType] 
    ,p.[Title] 
    ,p.[FirstName] 
    ,p.[MiddleName] 
    ,p.[LastName] 
    ,p.[Suffix] 
    ,pp.[PhoneNumber] 
	,pnt.[Name] AS [PhoneNumberType]
    ,ea.[EmailAddress] 
    ,p.[EmailPromotion] 
FROM [Purchasing].[Vendor] v
    INNER JOIN [Person].[BusinessEntityContact] bec 
    ON bec.[BusinessEntityID] = v.[BusinessEntityID]
	INNER JOIN [Person].ContactType ct
	ON ct.[ContactTypeID] = bec.[ContactTypeID]
	INNER JOIN [Person].[Person] p
	ON p.[BusinessEntityID] = bec.[PersonID]
	LEFT OUTER JOIN [Person].[EmailAddress] ea
	ON ea.[BusinessEntityID] = p.[BusinessEntityID]
	LEFT OUTER JOIN [Person].[PersonPhone] pp
	ON pp.[BusinessEntityID] = p.[BusinessEntityID]
	LEFT OUTER JOIN [Person].[PhoneNumberType] pnt
	ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID];
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.vVendorWithContacts') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Vendor (company) names  and the names of vendor employees to contact.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'VIEW' , @level1name = N'vVendorWithContacts' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Vendor (company) names  and the names of vendor employees to contact.' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'VIEW' , @level1name = N'vVendorWithContacts' END;

-- changeset JamesBennett:1727463743285-73
CREATE VIEW Sales.vStoreWithContacts AS SELECT 
    s.[BusinessEntityID] 
    ,s.[Name] 
    ,ct.[Name] AS [ContactType] 
    ,p.[Title] 
    ,p.[FirstName] 
    ,p.[MiddleName] 
    ,p.[LastName] 
    ,p.[Suffix] 
    ,pp.[PhoneNumber] 
	,pnt.[Name] AS [PhoneNumberType]
    ,ea.[EmailAddress] 
    ,p.[EmailPromotion] 
FROM [Sales].[Store] s
    INNER JOIN [Person].[BusinessEntityContact] bec 
    ON bec.[BusinessEntityID] = s.[BusinessEntityID]
	INNER JOIN [Person].[ContactType] ct
	ON ct.[ContactTypeID] = bec.[ContactTypeID]
	INNER JOIN [Person].[Person] p
	ON p.[BusinessEntityID] = bec.[PersonID]
	LEFT OUTER JOIN [Person].[EmailAddress] ea
	ON ea.[BusinessEntityID] = p.[BusinessEntityID]
	LEFT OUTER JOIN [Person].[PersonPhone] pp
	ON pp.[BusinessEntityID] = p.[BusinessEntityID]
	LEFT OUTER JOIN [Person].[PhoneNumberType] pnt
	ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID];
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.vStoreWithContacts') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Stores (including store contacts) that sell Adventure Works Cycles products to consumers.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vStoreWithContacts' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Stores (including store contacts) that sell Adventure Works Cycles products to consumers.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vStoreWithContacts' END;

-- changeset JamesBennett:1727463743285-74
CREATE UNIQUE NONCLUSTERED INDEX AK_ContactType_Name ON Person.ContactType(Name);

-- changeset JamesBennett:1727463743285-75
CREATE UNIQUE NONCLUSTERED INDEX AK_Customer_AccountNumber ON Sales.Customer(AccountNumber);

-- changeset JamesBennett:1727463743285-76
CREATE UNIQUE NONCLUSTERED INDEX AK_Customer_rowguid ON Sales.Customer(rowguid);

-- changeset JamesBennett:1727463743285-77 splitStatements:true
if object_id('Sales.iduSalesOrderDetail', 'tr') is null exec ('CREATE TRIGGER iduSalesOrderDetail on Sales.SalesOrderDetail after insert as begin select ''STUB'' END');
ALTER TRIGGER Sales.[iduSalesOrderDetail] ON Sales.[SalesOrderDetail] 
AFTER INSERT, DELETE, UPDATE AS 
BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- If inserting or updating these columns
        IF UPDATE([ProductID]) OR UPDATE([OrderQty]) OR UPDATE([UnitPrice]) OR UPDATE([UnitPriceDiscount]) 
        -- Insert record into TransactionHistory
        BEGIN
            INSERT INTO [Production].[TransactionHistory]
                ([ProductID]
                ,[ReferenceOrderID]
                ,[ReferenceOrderLineID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity]
                ,[ActualCost])
            SELECT 
                inserted.[ProductID]
                ,inserted.[SalesOrderID]
                ,inserted.[SalesOrderDetailID]
                ,'S'
                ,GETDATE()
                ,inserted.[OrderQty]
                ,inserted.[UnitPrice]
            FROM inserted 
                INNER JOIN [Sales].[SalesOrderHeader] 
                ON inserted.[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID];

            UPDATE [Person].[Person] 
            SET [Demographics].modify('declare default element namespace 
                "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
                replace value of (/IndividualSurvey/TotalPurchaseYTD)[1] 
                with data(/IndividualSurvey/TotalPurchaseYTD)[1] + sql:column ("inserted.LineTotal")') 
            FROM inserted 
                INNER JOIN [Sales].[SalesOrderHeader] AS SOH
                ON inserted.[SalesOrderID] = SOH.[SalesOrderID] 
                INNER JOIN [Sales].[Customer] AS C
                ON SOH.[CustomerID] = C.[CustomerID]
            WHERE C.[PersonID] = [Person].[Person].[BusinessEntityID];
        END;

        -- Update SubTotal in SalesOrderHeader record. Note that this causes the 
        -- SalesOrderHeader trigger to fire which will update the RevisionNumber.
        UPDATE [Sales].[SalesOrderHeader]
        SET [Sales].[SalesOrderHeader].[SubTotal] = 
            (SELECT SUM([Sales].[SalesOrderDetail].[LineTotal])
                FROM [Sales].[SalesOrderDetail]
                WHERE [Sales].[SalesOrderHeader].[SalesOrderID] = [Sales].[SalesOrderDetail].[SalesOrderID])
        WHERE [Sales].[SalesOrderHeader].[SalesOrderID] IN (SELECT inserted.[SalesOrderID] FROM inserted);

        UPDATE [Person].[Person] 
        SET [Demographics].modify('declare default element namespace 
            "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
            replace value of (/IndividualSurvey/TotalPurchaseYTD)[1] 
            with data(/IndividualSurvey/TotalPurchaseYTD)[1] - sql:column("deleted.LineTotal")') 
        FROM deleted 
            INNER JOIN [Sales].[SalesOrderHeader] 
            ON deleted.[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] 
            INNER JOIN [Sales].[Customer]
            ON [Sales].[Customer].[CustomerID] = [Sales].[SalesOrderHeader].[CustomerID]
        WHERE [Sales].[Customer].[PersonID] = [Person].[Person].[BusinessEntityID];
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

-- changeset JamesBennett:1727463743285-78
CREATE NONCLUSTERED INDEX IX_Customer_TerritoryID ON Sales.Customer(TerritoryID);

-- changeset JamesBennett:1727463743285-79
CREATE VIEW Sales.vIndividualCustomer AS SELECT 
    p.[BusinessEntityID]
    ,p.[Title]
    ,p.[FirstName]
    ,p.[MiddleName]
    ,p.[LastName]
    ,p.[Suffix]
    ,pp.[PhoneNumber]
	,pnt.[Name] AS [PhoneNumberType]
    ,ea.[EmailAddress]
    ,p.[EmailPromotion]
    ,at.[Name] AS [AddressType]
    ,a.[AddressLine1]
    ,a.[AddressLine2]
    ,a.[City]
    ,[StateProvinceName] = sp.[Name]
    ,a.[PostalCode]
    ,[CountryRegionName] = cr.[Name]
    ,p.[Demographics]
FROM [Person].[Person] p
    INNER JOIN [Person].[BusinessEntityAddress] bea 
    ON bea.[BusinessEntityID] = p.[BusinessEntityID] 
    INNER JOIN [Person].[Address] a 
    ON a.[AddressID] = bea.[AddressID]
    INNER JOIN [Person].[StateProvince] sp 
    ON sp.[StateProvinceID] = a.[StateProvinceID]
    INNER JOIN [Person].[CountryRegion] cr 
    ON cr.[CountryRegionCode] = sp.[CountryRegionCode]
    INNER JOIN [Person].[AddressType] at 
    ON at.[AddressTypeID] = bea.[AddressTypeID]
	INNER JOIN [Sales].[Customer] c
	ON c.[PersonID] = p.[BusinessEntityID]
	LEFT OUTER JOIN [Person].[EmailAddress] ea
	ON ea.[BusinessEntityID] = p.[BusinessEntityID]
	LEFT OUTER JOIN [Person].[PersonPhone] pp
	ON pp.[BusinessEntityID] = p.[BusinessEntityID]
	LEFT OUTER JOIN [Person].[PhoneNumberType] pnt
	ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID]
WHERE c.StoreID IS NULL;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.vIndividualCustomer') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Individual customers (names and addresses) that purchase Adventure Works Cycles products online.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vIndividualCustomer' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Individual customers (names and addresses) that purchase Adventure Works Cycles products online.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vIndividualCustomer' END;

-- changeset JamesBennett:1727463743285-80
CREATE UNIQUE NONCLUSTERED INDEX AK_Employee_LoginID ON HumanResources.Employee(LoginID);

-- changeset JamesBennett:1727463743285-81
CREATE UNIQUE NONCLUSTERED INDEX AK_Employee_NationalIDNumber ON HumanResources.Employee(NationalIDNumber);

-- changeset JamesBennett:1727463743285-82
CREATE UNIQUE NONCLUSTERED INDEX AK_Employee_rowguid ON HumanResources.Employee(rowguid);

-- changeset JamesBennett:1727463743285-83
ALTER TABLE HumanResources.Employee ADD CONSTRAINT CK_Employee_BirthDate CHECK (([BirthDate]>='1930-01-01' AND [BirthDate]<=dateadd(year,(-18),getdate())));

-- changeset JamesBennett:1727463743285-84
ALTER TABLE HumanResources.Employee ADD CONSTRAINT CK_Employee_Gender CHECK ((upper([Gender])='F' OR upper([Gender])='M'));

-- changeset JamesBennett:1727463743285-85
ALTER TABLE HumanResources.Employee ADD CONSTRAINT CK_Employee_HireDate CHECK (([HireDate]>='1996-07-01' AND [HireDate]<=dateadd(day,(1),getdate())));

-- changeset JamesBennett:1727463743285-86
ALTER TABLE HumanResources.Employee ADD CONSTRAINT CK_Employee_MaritalStatus CHECK ((upper([MaritalStatus])='S' OR upper([MaritalStatus])='M'));

-- changeset JamesBennett:1727463743285-87
ALTER TABLE HumanResources.Employee ADD CONSTRAINT CK_Employee_SickLeaveHours CHECK (([SickLeaveHours]>=(0) AND [SickLeaveHours]<=(120)));

-- changeset JamesBennett:1727463743285-88
ALTER TABLE HumanResources.Employee ADD CONSTRAINT CK_Employee_VacationHours CHECK (([VacationHours]>=(-40) AND [VacationHours]<=(240)));

-- changeset JamesBennett:1727463743285-89 splitStatements:true
if object_id('HumanResources.dEmployee', 'tr') is null exec ('CREATE TRIGGER dEmployee on HumanResources.Employee after insert as begin select ''STUB'' END');
ALTER TRIGGER HumanResources.[dEmployee] ON HumanResources.[Employee] 
INSTEAD OF DELETE NOT FOR REPLICATION AS 
BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN
        RAISERROR
            (N'Employees cannot be deleted. They can only be marked as not current.', -- Message
            10, -- Severity.
            1); -- State.

        -- Rollback any active or uncommittable transactions
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END
    END;
END;

-- changeset JamesBennett:1727463743285-90
CREATE NONCLUSTERED INDEX IX_Employee_OrganizationLevel_OrganizationNode ON HumanResources.Employee(OrganizationLevel, OrganizationNode);

-- changeset JamesBennett:1727463743285-91
CREATE NONCLUSTERED INDEX IX_Employee_OrganizationNode ON HumanResources.Employee(OrganizationNode);

-- changeset JamesBennett:1727463743285-92 splitStatements:true
if object_id('HumanResources.uspUpdateEmployeeHireInfo', 'p') is null exec ('create procedure HumanResources.uspUpdateEmployeeHireInfo as select 1 a');
ALTER PROCEDURE HumanResources.[uspUpdateEmployeeHireInfo]
    @BusinessEntityID [int], 
    @JobTitle [nvarchar](50), 
    @HireDate [datetime], 
    @RateChangeDate [datetime], 
    @Rate [money], 
    @PayFrequency [tinyint], 
    @CurrentFlag [dbo].[Flag] 
WITH EXECUTE AS CALLER
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        UPDATE [HumanResources].[Employee] 
        SET [JobTitle] = @JobTitle 
            ,[HireDate] = @HireDate 
            ,[CurrentFlag] = @CurrentFlag 
        WHERE [BusinessEntityID] = @BusinessEntityID;

        INSERT INTO [HumanResources].[EmployeePayHistory] 
            ([BusinessEntityID]
            ,[RateChangeDate]
            ,[Rate]
            ,[PayFrequency]) 
        VALUES (@BusinessEntityID, @RateChangeDate, @Rate, @PayFrequency);

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

-- changeset JamesBennett:1727463743285-93 splitStatements:true
if object_id('HumanResources.uspUpdateEmployeeLogin', 'p') is null exec ('create procedure HumanResources.uspUpdateEmployeeLogin as select 1 a');
ALTER PROCEDURE HumanResources.[uspUpdateEmployeeLogin]
    @BusinessEntityID [int], 
    @OrganizationNode [hierarchyid],
    @LoginID [nvarchar](256),
    @JobTitle [nvarchar](50),
    @HireDate [datetime],
    @CurrentFlag [dbo].[Flag]
WITH EXECUTE AS CALLER
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        UPDATE [HumanResources].[Employee] 
        SET [OrganizationNode] = @OrganizationNode 
            ,[LoginID] = @LoginID 
            ,[JobTitle] = @JobTitle 
            ,[HireDate] = @HireDate 
            ,[CurrentFlag] = @CurrentFlag 
        WHERE [BusinessEntityID] = @BusinessEntityID;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

-- changeset JamesBennett:1727463743285-94 splitStatements:true
if object_id('HumanResources.uspUpdateEmployeePersonalInfo', 'p') is null exec ('create procedure HumanResources.uspUpdateEmployeePersonalInfo as select 1 a');
ALTER PROCEDURE HumanResources.[uspUpdateEmployeePersonalInfo]
    @BusinessEntityID [int], 
    @NationalIDNumber [nvarchar](15), 
    @BirthDate [datetime], 
    @MaritalStatus [nchar](1), 
    @Gender [nchar](1)
WITH EXECUTE AS CALLER
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        UPDATE [HumanResources].[Employee] 
        SET [NationalIDNumber] = @NationalIDNumber 
            ,[BirthDate] = @BirthDate 
            ,[MaritalStatus] = @MaritalStatus 
            ,[Gender] = @Gender 
        WHERE [BusinessEntityID] = @BusinessEntityID;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

-- changeset JamesBennett:1727463743285-95
CREATE VIEW HumanResources.vEmployee AS SELECT 
    e.[BusinessEntityID]
    ,p.[Title]
    ,p.[FirstName]
    ,p.[MiddleName]
    ,p.[LastName]
    ,p.[Suffix]
    ,e.[JobTitle]  
    ,pp.[PhoneNumber]
    ,pnt.[Name] AS [PhoneNumberType]
    ,ea.[EmailAddress]
    ,p.[EmailPromotion]
    ,a.[AddressLine1]
    ,a.[AddressLine2]
    ,a.[City]
    ,sp.[Name] AS [StateProvinceName] 
    ,a.[PostalCode]
    ,cr.[Name] AS [CountryRegionName] 
    ,p.[AdditionalContactInfo]
FROM [HumanResources].[Employee] e
	INNER JOIN [Person].[Person] p
	ON p.[BusinessEntityID] = e.[BusinessEntityID]
    INNER JOIN [Person].[BusinessEntityAddress] bea 
    ON bea.[BusinessEntityID] = e.[BusinessEntityID] 
    INNER JOIN [Person].[Address] a 
    ON a.[AddressID] = bea.[AddressID]
    INNER JOIN [Person].[StateProvince] sp 
    ON sp.[StateProvinceID] = a.[StateProvinceID]
    INNER JOIN [Person].[CountryRegion] cr 
    ON cr.[CountryRegionCode] = sp.[CountryRegionCode]
    LEFT OUTER JOIN [Person].[PersonPhone] pp
    ON pp.BusinessEntityID = p.[BusinessEntityID]
    LEFT OUTER JOIN [Person].[PhoneNumberType] pnt
    ON pp.[PhoneNumberTypeID] = pnt.[PhoneNumberTypeID]
    LEFT OUTER JOIN [Person].[EmailAddress] ea
    ON p.[BusinessEntityID] = ea.[BusinessEntityID];
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.vEmployee') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Employee names and addresses.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vEmployee' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Employee names and addresses.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vEmployee' END;

-- changeset JamesBennett:1727463743285-96
CREATE VIEW HumanResources.vEmployeeDepartment AS SELECT 
    e.[BusinessEntityID] 
    ,p.[Title] 
    ,p.[FirstName] 
    ,p.[MiddleName] 
    ,p.[LastName] 
    ,p.[Suffix] 
    ,e.[JobTitle]
    ,d.[Name] AS [Department] 
    ,d.[GroupName] 
    ,edh.[StartDate] 
FROM [HumanResources].[Employee] e
	INNER JOIN [Person].[Person] p
	ON p.[BusinessEntityID] = e.[BusinessEntityID]
    INNER JOIN [HumanResources].[EmployeeDepartmentHistory] edh 
    ON e.[BusinessEntityID] = edh.[BusinessEntityID] 
    INNER JOIN [HumanResources].[Department] d 
    ON edh.[DepartmentID] = d.[DepartmentID] 
WHERE edh.EndDate IS NULL;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.vEmployeeDepartment') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Returns employee name, title, and current department.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vEmployeeDepartment' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Returns employee name, title, and current department.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vEmployeeDepartment' END;

-- changeset JamesBennett:1727463743285-97
CREATE VIEW HumanResources.vEmployeeDepartmentHistory AS SELECT 
    e.[BusinessEntityID] 
    ,p.[Title] 
    ,p.[FirstName] 
    ,p.[MiddleName] 
    ,p.[LastName] 
    ,p.[Suffix] 
    ,s.[Name] AS [Shift]
    ,d.[Name] AS [Department] 
    ,d.[GroupName] 
    ,edh.[StartDate] 
    ,edh.[EndDate]
FROM [HumanResources].[Employee] e
	INNER JOIN [Person].[Person] p
	ON p.[BusinessEntityID] = e.[BusinessEntityID]
    INNER JOIN [HumanResources].[EmployeeDepartmentHistory] edh 
    ON e.[BusinessEntityID] = edh.[BusinessEntityID] 
    INNER JOIN [HumanResources].[Department] d 
    ON edh.[DepartmentID] = d.[DepartmentID] 
    INNER JOIN [HumanResources].[Shift] s
    ON s.[ShiftID] = edh.[ShiftID];
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.vEmployeeDepartmentHistory') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Returns employee name and current and previous departments.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vEmployeeDepartmentHistory' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Returns employee name and current and previous departments.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vEmployeeDepartmentHistory' END;

-- changeset JamesBennett:1727463743285-98
CREATE VIEW Sales.vSalesPerson AS SELECT 
    s.[BusinessEntityID]
    ,p.[Title]
    ,p.[FirstName]
    ,p.[MiddleName]
    ,p.[LastName]
    ,p.[Suffix]
    ,e.[JobTitle]
    ,pp.[PhoneNumber]
	,pnt.[Name] AS [PhoneNumberType]
    ,ea.[EmailAddress]
    ,p.[EmailPromotion]
    ,a.[AddressLine1]
    ,a.[AddressLine2]
    ,a.[City]
    ,[StateProvinceName] = sp.[Name]
    ,a.[PostalCode]
    ,[CountryRegionName] = cr.[Name]
    ,[TerritoryName] = st.[Name]
    ,[TerritoryGroup] = st.[Group]
    ,s.[SalesQuota]
    ,s.[SalesYTD]
    ,s.[SalesLastYear]
FROM [Sales].[SalesPerson] s
    INNER JOIN [HumanResources].[Employee] e 
    ON e.[BusinessEntityID] = s.[BusinessEntityID]
	INNER JOIN [Person].[Person] p
	ON p.[BusinessEntityID] = s.[BusinessEntityID]
    INNER JOIN [Person].[BusinessEntityAddress] bea 
    ON bea.[BusinessEntityID] = s.[BusinessEntityID] 
    INNER JOIN [Person].[Address] a 
    ON a.[AddressID] = bea.[AddressID]
    INNER JOIN [Person].[StateProvince] sp 
    ON sp.[StateProvinceID] = a.[StateProvinceID]
    INNER JOIN [Person].[CountryRegion] cr 
    ON cr.[CountryRegionCode] = sp.[CountryRegionCode]
    LEFT OUTER JOIN [Sales].[SalesTerritory] st 
    ON st.[TerritoryID] = s.[TerritoryID]
	LEFT OUTER JOIN [Person].[EmailAddress] ea
	ON ea.[BusinessEntityID] = p.[BusinessEntityID]
	LEFT OUTER JOIN [Person].[PersonPhone] pp
	ON pp.[BusinessEntityID] = p.[BusinessEntityID]
	LEFT OUTER JOIN [Person].[PhoneNumberType] pnt
	ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID];
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.vSalesPerson') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Sales representiatives (names and addresses) and their sales-related information.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vSalesPerson' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Sales representiatives (names and addresses) and their sales-related information.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vSalesPerson' END;

-- changeset JamesBennett:1727463743285-99
CREATE VIEW Sales.vSalesPersonSalesByFiscalYears AS SELECT 
    pvt.[SalesPersonID]
    ,pvt.[FullName]
    ,pvt.[JobTitle]
    ,pvt.[SalesTerritory]
    ,pvt.[2002]
    ,pvt.[2003]
    ,pvt.[2004] 
FROM (SELECT 
        soh.[SalesPersonID]
        ,p.[FirstName] + ' ' + COALESCE(p.[MiddleName], '') + ' ' + p.[LastName] AS [FullName]
        ,e.[JobTitle]
        ,st.[Name] AS [SalesTerritory]
        ,soh.[SubTotal]
        ,YEAR(DATEADD(m, 6, soh.[OrderDate])) AS [FiscalYear] 
    FROM [Sales].[SalesPerson] sp 
        INNER JOIN [Sales].[SalesOrderHeader] soh 
        ON sp.[BusinessEntityID] = soh.[SalesPersonID]
        INNER JOIN [Sales].[SalesTerritory] st 
        ON sp.[TerritoryID] = st.[TerritoryID] 
        INNER JOIN [HumanResources].[Employee] e 
        ON soh.[SalesPersonID] = e.[BusinessEntityID] 
		INNER JOIN [Person].[Person] p
		ON p.[BusinessEntityID] = sp.[BusinessEntityID]
	 ) AS soh 
PIVOT 
(
    SUM([SubTotal]) 
    FOR [FiscalYear] 
    IN ([2002], [2003], [2004])
) AS pvt;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.vSalesPersonSalesByFiscalYears') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Uses PIVOT to return aggregated sales information for each sales representative.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vSalesPersonSalesByFiscalYears' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Uses PIVOT to return aggregated sales information for each sales representative.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vSalesPersonSalesByFiscalYears' END;

-- changeset JamesBennett:1727463743285-100
CREATE UNIQUE NONCLUSTERED INDEX AK_Person_rowguid ON Person.Person(rowguid);

-- changeset JamesBennett:1727463743285-101
ALTER TABLE Person.Person ADD CONSTRAINT CK_Person_EmailPromotion CHECK (([EmailPromotion]>=(0) AND [EmailPromotion]<=(2)));

-- changeset JamesBennett:1727463743285-102
ALTER TABLE Person.Person ADD CONSTRAINT CK_Person_PersonType CHECK (([PersonType] IS NULL OR (upper([PersonType])='GC' OR upper([PersonType])='SP' OR upper([PersonType])='EM' OR upper([PersonType])='IN' OR upper([PersonType])='VC' OR upper([PersonType])='SC')));

-- changeset JamesBennett:1727463743285-103 splitStatements:true
if object_id('Person.iuPerson', 'tr') is null exec ('CREATE TRIGGER iuPerson on Person.Person after insert as begin select ''STUB'' END');
ALTER TRIGGER Person.[iuPerson] ON Person.[Person] 
AFTER INSERT, UPDATE NOT FOR REPLICATION AS 
BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    IF UPDATE([BusinessEntityID]) OR UPDATE([Demographics]) 
    BEGIN
        UPDATE [Person].[Person] 
        SET [Person].[Person].[Demographics] = N'<IndividualSurvey xmlns="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"> 
            <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            </IndividualSurvey>' 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NULL;
        
        UPDATE [Person].[Person] 
        SET [Demographics].modify(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
            insert <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            as first 
            into (/IndividualSurvey)[1]') 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NOT NULL 
            AND inserted.[Demographics].exist(N'declare default element namespace 
                "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
                /IndividualSurvey/TotalPurchaseYTD') <> 1;
    END;
END;

-- changeset JamesBennett:1727463743285-104
CREATE NONCLUSTERED INDEX IX_Person_LastName_FirstName_MiddleName ON Person.Person(LastName, FirstName, MiddleName);

-- changeset JamesBennett:1727463743285-105
CREATE VIEW Person.vAdditionalContactInfo AS SELECT 
    [BusinessEntityID] 
    ,[FirstName]
    ,[MiddleName]
    ,[LastName]
    ,[ContactInfo].ref.value(N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:telephoneNumber)[1]/act:number', 'nvarchar(50)') AS [TelephoneNumber] 
    ,LTRIM(RTRIM([ContactInfo].ref.value(N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:telephoneNumber/act:SpecialInstructions/text())[1]', 'nvarchar(max)'))) AS [TelephoneSpecialInstructions] 
    ,[ContactInfo].ref.value(N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes";
        (act:homePostalAddress/act:Street)[1]', 'nvarchar(50)') AS [Street] 
    ,[ContactInfo].ref.value(N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:City)[1]', 'nvarchar(50)') AS [City] 
    ,[ContactInfo].ref.value(N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:StateProvince)[1]', 'nvarchar(50)') AS [StateProvince] 
    ,[ContactInfo].ref.value(N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:PostalCode)[1]', 'nvarchar(50)') AS [PostalCode] 
    ,[ContactInfo].ref.value(N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:CountryRegion)[1]', 'nvarchar(50)') AS [CountryRegion] 
    ,[ContactInfo].ref.value(N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:SpecialInstructions/text())[1]', 'nvarchar(max)') AS [HomeAddressSpecialInstructions] 
    ,[ContactInfo].ref.value(N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:eMailAddress)[1]', 'nvarchar(128)') AS [EMailAddress] 
    ,LTRIM(RTRIM([ContactInfo].ref.value(N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:SpecialInstructions/text())[1]', 'nvarchar(max)'))) AS [EMailSpecialInstructions] 
    ,[ContactInfo].ref.value(N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:SpecialInstructions/act:telephoneNumber/act:number)[1]', 'nvarchar(50)') AS [EMailTelephoneNumber] 
    ,[rowguid] 
    ,[ModifiedDate]
FROM [Person].[Person]
OUTER APPLY [AdditionalContactInfo].nodes(
    'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
    /ci:AdditionalContactInfo') AS ContactInfo(ref) 
WHERE [AdditionalContactInfo] IS NOT NULL;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.vAdditionalContactInfo') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Displays the contact name and content from each element in the xml column AdditionalContactInfo for that person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'VIEW' , @level1name = N'vAdditionalContactInfo' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Displays the contact name and content from each element in the xml column AdditionalContactInfo for that person.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'VIEW' , @level1name = N'vAdditionalContactInfo' END;

-- changeset JamesBennett:1727463743285-106
CREATE VIEW Sales.vPersonDemographics AS SELECT 
    p.[BusinessEntityID] 
    ,[IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        TotalPurchaseYTD[1]', 'money') AS [TotalPurchaseYTD] 
    ,CONVERT(datetime, REPLACE([IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        DateFirstPurchase[1]', 'nvarchar(20)') ,'Z', ''), 101) AS [DateFirstPurchase] 
    ,CONVERT(datetime, REPLACE([IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        BirthDate[1]', 'nvarchar(20)') ,'Z', ''), 101) AS [BirthDate] 
    ,[IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        MaritalStatus[1]', 'nvarchar(1)') AS [MaritalStatus] 
    ,[IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        YearlyIncome[1]', 'nvarchar(30)') AS [YearlyIncome] 
    ,[IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Gender[1]', 'nvarchar(1)') AS [Gender] 
    ,[IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        TotalChildren[1]', 'integer') AS [TotalChildren] 
    ,[IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        NumberChildrenAtHome[1]', 'integer') AS [NumberChildrenAtHome] 
    ,[IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Education[1]', 'nvarchar(30)') AS [Education] 
    ,[IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Occupation[1]', 'nvarchar(30)') AS [Occupation] 
    ,[IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        HomeOwnerFlag[1]', 'bit') AS [HomeOwnerFlag] 
    ,[IndividualSurvey].[ref].[value](N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        NumberCarsOwned[1]', 'integer') AS [NumberCarsOwned] 
FROM [Person].[Person] p 
CROSS APPLY p.[Demographics].nodes(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
    /IndividualSurvey') AS [IndividualSurvey](ref) 
WHERE [Demographics] IS NOT NULL;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.vPersonDemographics') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Displays the content from each element in the xml column Demographics for each customer in the Person.Person table.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vPersonDemographics' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Displays the content from each element in the xml column Demographics for each customer in the Person.Person table.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vPersonDemographics' END;

-- changeset JamesBennett:1727463743285-107
CREATE UNIQUE NONCLUSTERED INDEX AK_Store_rowguid ON Sales.Store(rowguid);

-- changeset JamesBennett:1727463743285-108
CREATE NONCLUSTERED INDEX IX_Store_SalesPersonID ON Sales.Store(SalesPersonID);

-- changeset JamesBennett:1727463743285-109
CREATE VIEW Sales.vStoreWithAddresses AS SELECT 
    s.[BusinessEntityID] 
    ,s.[Name] 
    ,at.[Name] AS [AddressType]
    ,a.[AddressLine1] 
    ,a.[AddressLine2] 
    ,a.[City] 
    ,sp.[Name] AS [StateProvinceName] 
    ,a.[PostalCode] 
    ,cr.[Name] AS [CountryRegionName] 
FROM [Sales].[Store] s
    INNER JOIN [Person].[BusinessEntityAddress] bea 
    ON bea.[BusinessEntityID] = s.[BusinessEntityID] 
    INNER JOIN [Person].[Address] a 
    ON a.[AddressID] = bea.[AddressID]
    INNER JOIN [Person].[StateProvince] sp 
    ON sp.[StateProvinceID] = a.[StateProvinceID]
    INNER JOIN [Person].[CountryRegion] cr 
    ON cr.[CountryRegionCode] = sp.[CountryRegionCode]
    INNER JOIN [Person].[AddressType] at 
    ON at.[AddressTypeID] = bea.[AddressTypeID];
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.vStoreWithAddresses') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Stores (including store addresses) that sell Adventure Works Cycles products to consumers.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vStoreWithAddresses' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Stores (including store addresses) that sell Adventure Works Cycles products to consumers.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vStoreWithAddresses' END;

-- changeset JamesBennett:1727463743285-110
CREATE VIEW Sales.vStoreWithDemographics AS SELECT 
    s.[BusinessEntityID] 
    ,s.[Name] 
    ,s.[Demographics].value('declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/AnnualSales)[1]', 'money') AS [AnnualSales] 
    ,s.[Demographics].value('declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/AnnualRevenue)[1]', 'money') AS [AnnualRevenue] 
    ,s.[Demographics].value('declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/BankName)[1]', 'nvarchar(50)') AS [BankName] 
    ,s.[Demographics].value('declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/BusinessType)[1]', 'nvarchar(5)') AS [BusinessType] 
    ,s.[Demographics].value('declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/YearOpened)[1]', 'integer') AS [YearOpened] 
    ,s.[Demographics].value('declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Specialty)[1]', 'nvarchar(50)') AS [Specialty] 
    ,s.[Demographics].value('declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/SquareFeet)[1]', 'integer') AS [SquareFeet] 
    ,s.[Demographics].value('declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Brands)[1]', 'nvarchar(30)') AS [Brands] 
    ,s.[Demographics].value('declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Internet)[1]', 'nvarchar(30)') AS [Internet] 
    ,s.[Demographics].value('declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/NumberEmployees)[1]', 'integer') AS [NumberEmployees] 
FROM [Sales].[Store] s;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Sales.vStoreWithDemographics') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Stores (including demographics) that sell Adventure Works Cycles products to consumers.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vStoreWithDemographics' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Stores (including demographics) that sell Adventure Works Cycles products to consumers.' , @level0type = N'SCHEMA' , @level0name = N'Sales' , @level1type = N'VIEW' , @level1name = N'vStoreWithDemographics' END;

-- changeset JamesBennett:1727463743285-111
CREATE UNIQUE NONCLUSTERED INDEX AK_Vendor_AccountNumber ON Purchasing.Vendor(AccountNumber);

-- changeset JamesBennett:1727463743285-112
ALTER TABLE Purchasing.Vendor ADD CONSTRAINT CK_Vendor_CreditRating CHECK (([CreditRating]>=(1) AND [CreditRating]<=(5)));

-- changeset JamesBennett:1727463743285-113 splitStatements:true
if object_id('Purchasing.dVendor', 'tr') is null exec ('CREATE TRIGGER dVendor on Purchasing.Vendor after insert as begin select ''STUB'' END');
ALTER TRIGGER Purchasing.[dVendor] ON Purchasing.[Vendor] 
INSTEAD OF DELETE NOT FOR REPLICATION AS 
BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @DeleteCount int;

        SELECT @DeleteCount = COUNT(*) FROM deleted;
        IF @DeleteCount > 0 
        BEGIN
            RAISERROR
                (N'Vendors cannot be deleted. They can only be marked as not active.', -- Message
                10, -- Severity.
                1); -- State.

        -- Rollback any active or uncommittable transactions
            IF @@TRANCOUNT > 0
            BEGIN
                ROLLBACK TRANSACTION;
            END
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

-- changeset JamesBennett:1727463743285-114
CREATE VIEW Purchasing.vVendorWithAddresses AS SELECT 
    v.[BusinessEntityID]
    ,v.[Name]
    ,at.[Name] AS [AddressType]
    ,a.[AddressLine1] 
    ,a.[AddressLine2] 
    ,a.[City] 
    ,sp.[Name] AS [StateProvinceName] 
    ,a.[PostalCode] 
    ,cr.[Name] AS [CountryRegionName] 
FROM [Purchasing].[Vendor] v
    INNER JOIN [Person].[BusinessEntityAddress] bea 
    ON bea.[BusinessEntityID] = v.[BusinessEntityID] 
    INNER JOIN [Person].[Address] a 
    ON a.[AddressID] = bea.[AddressID]
    INNER JOIN [Person].[StateProvince] sp 
    ON sp.[StateProvinceID] = a.[StateProvinceID]
    INNER JOIN [Person].[CountryRegion] cr 
    ON cr.[CountryRegionCode] = sp.[CountryRegionCode]
    INNER JOIN [Person].[AddressType] at 
    ON at.[AddressTypeID] = bea.[AddressTypeID];
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Purchasing.vVendorWithAddresses') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Vendor (company) names and addresses .' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'VIEW' , @level1name = N'vVendorWithAddresses' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Vendor (company) names and addresses .' , @level0type = N'SCHEMA' , @level0name = N'Purchasing' , @level1type = N'VIEW' , @level1name = N'vVendorWithAddresses' END;

-- changeset JamesBennett:1727463743285-115
CREATE UNIQUE NONCLUSTERED INDEX AK_Product_Name ON Production.Product(Name);

-- changeset JamesBennett:1727463743285-116
CREATE UNIQUE NONCLUSTERED INDEX AK_Product_ProductNumber ON Production.Product(ProductNumber);

-- changeset JamesBennett:1727463743285-117
CREATE UNIQUE NONCLUSTERED INDEX AK_Product_rowguid ON Production.Product(rowguid);

-- changeset JamesBennett:1727463743285-118
ALTER TABLE Production.Product ADD CONSTRAINT CK_Product_Class CHECK ((upper([Class])='H' OR upper([Class])='M' OR upper([Class])='L' OR [Class] IS NULL));

-- changeset JamesBennett:1727463743285-119
ALTER TABLE Production.Product ADD CONSTRAINT CK_Product_DaysToManufacture CHECK (([DaysToManufacture]>=(0)));

-- changeset JamesBennett:1727463743285-120
ALTER TABLE Production.Product ADD CONSTRAINT CK_Product_ListPrice CHECK (([ListPrice]>=(0.00)));

-- changeset JamesBennett:1727463743285-121
ALTER TABLE Production.Product ADD CONSTRAINT CK_Product_ProductLine CHECK ((upper([ProductLine])='R' OR upper([ProductLine])='M' OR upper([ProductLine])='T' OR upper([ProductLine])='S' OR [ProductLine] IS NULL));

-- changeset JamesBennett:1727463743285-122
ALTER TABLE Production.Product ADD CONSTRAINT CK_Product_ReorderPoint CHECK (([ReorderPoint]>(0)));

-- changeset JamesBennett:1727463743285-123
ALTER TABLE Production.Product ADD CONSTRAINT CK_Product_SafetyStockLevel CHECK (([SafetyStockLevel]>(0)));

-- changeset JamesBennett:1727463743285-124
ALTER TABLE Production.Product ADD CONSTRAINT CK_Product_SellEndDate CHECK (([SellEndDate]>=[SellStartDate] OR [SellEndDate] IS NULL));

-- changeset JamesBennett:1727463743285-125
ALTER TABLE Production.Product ADD CONSTRAINT CK_Product_StandardCost CHECK (([StandardCost]>=(0.00)));

-- changeset JamesBennett:1727463743285-126
ALTER TABLE Production.Product ADD CONSTRAINT CK_Product_Style CHECK ((upper([Style])='U' OR upper([Style])='M' OR upper([Style])='W' OR [Style] IS NULL));

-- changeset JamesBennett:1727463743285-127
ALTER TABLE Production.Product ADD CONSTRAINT CK_Product_Weight CHECK (([Weight]>(0.00)));

-- changeset JamesBennett:1727463743285-128
CREATE VIEW [Production].[vProductAndDescription] 
WITH SCHEMABINDING 
AS 
-- View (indexed or standard) to display products and product descriptions by language.
SELECT 
    p.[ProductID] 
    ,p.[Name] 
    ,pm.[Name] AS [ProductModel] 
    ,pmx.[CultureID] 
    ,pd.[Description] 
FROM [Production].[Product] p 
    INNER JOIN [Production].[ProductModel] pm 
    ON p.[ProductModelID] = pm.[ProductModelID] 
    INNER JOIN [Production].[ProductModelProductDescriptionCulture] pmx 
    ON pm.[ProductModelID] = pmx.[ProductModelID] 
    INNER JOIN [Production].[ProductDescription] pd 
    ON pmx.[ProductDescriptionID] = pd.[ProductDescriptionID];
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.vProductAndDescription') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Product names and descriptions. Product descriptions are provided in multiple languages.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'VIEW' , @level1name = N'vProductAndDescription' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Product names and descriptions. Product descriptions are provided in multiple languages.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'VIEW' , @level1name = N'vProductAndDescription' END;

-- changeset JamesBennett:1727463743285-129
ALTER TABLE Production.ProductListPriceHistory ADD CONSTRAINT CK_ProductListPriceHistory_EndDate CHECK (([EndDate]>=[StartDate] OR [EndDate] IS NULL));

-- changeset JamesBennett:1727463743285-130
ALTER TABLE Production.ProductListPriceHistory ADD CONSTRAINT CK_ProductListPriceHistory_ListPrice CHECK (([ListPrice]>(0.00)));

-- changeset JamesBennett:1727463743285-131
ALTER TABLE Production.ProductCostHistory ADD CONSTRAINT CK_ProductCostHistory_EndDate CHECK (([EndDate]>=[StartDate] OR [EndDate] IS NULL));

-- changeset JamesBennett:1727463743285-132
ALTER TABLE Production.ProductCostHistory ADD CONSTRAINT CK_ProductCostHistory_StandardCost CHECK (([StandardCost]>=(0.00)));

-- changeset JamesBennett:1727463743285-133
ALTER TABLE Production.ProductInventory ADD CONSTRAINT CK_ProductInventory_Bin CHECK (([Bin]>=(0) AND [Bin]<=(100)));

-- changeset JamesBennett:1727463743285-134
ALTER TABLE Production.ProductInventory ADD CONSTRAINT CK_ProductInventory_Shelf CHECK (([Shelf] like '[A-Za-z]' OR [Shelf]='N/A'));

-- changeset JamesBennett:1727463743285-135
CREATE UNIQUE CLUSTERED INDEX AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate ON Production.BillOfMaterials(ProductAssemblyID, ComponentID, StartDate);

-- changeset JamesBennett:1727463743285-136
ALTER TABLE Production.BillOfMaterials ADD CONSTRAINT CK_BillOfMaterials_BOMLevel CHECK (([ProductAssemblyID] IS NULL AND [BOMLevel]=(0) AND [PerAssemblyQty]=(1.00) OR [ProductAssemblyID] IS NOT NULL AND [BOMLevel]>=(1)));

-- changeset JamesBennett:1727463743285-137
ALTER TABLE Production.BillOfMaterials ADD CONSTRAINT CK_BillOfMaterials_EndDate CHECK (([EndDate]>[StartDate] OR [EndDate] IS NULL));

-- changeset JamesBennett:1727463743285-138
ALTER TABLE Production.BillOfMaterials ADD CONSTRAINT CK_BillOfMaterials_PerAssemblyQty CHECK (([PerAssemblyQty]>=(1.00)));

-- changeset JamesBennett:1727463743285-139
ALTER TABLE Production.BillOfMaterials ADD CONSTRAINT CK_BillOfMaterials_ProductAssemblyID CHECK (([ProductAssemblyID]<>[ComponentID]));

-- changeset JamesBennett:1727463743285-140
CREATE NONCLUSTERED INDEX IX_BillOfMaterials_UnitMeasureCode ON Production.BillOfMaterials(UnitMeasureCode);

-- changeset JamesBennett:1727463743285-141
ALTER TABLE Production.BillOfMaterials ADD CONSTRAINT PK_BillOfMaterials_BillOfMaterialsID PRIMARY KEY NONCLUSTERED (BillOfMaterialsID);

-- changeset JamesBennett:1727463743285-142
CREATE NONCLUSTERED INDEX IX_JobCandidate_BusinessEntityID ON HumanResources.JobCandidate(BusinessEntityID);

-- changeset JamesBennett:1727463743285-143
CREATE VIEW HumanResources.vJobCandidate AS SELECT 
    jc.[JobCandidateID] 
    ,jc.[BusinessEntityID] 
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Prefix)[1]', 'nvarchar(30)') AS [Name.Prefix] 
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume";
        (/Resume/Name/Name.First)[1]', 'nvarchar(30)') AS [Name.First] 
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Middle)[1]', 'nvarchar(30)') AS [Name.Middle] 
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Last)[1]', 'nvarchar(30)') AS [Name.Last] 
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Suffix)[1]', 'nvarchar(30)') AS [Name.Suffix] 
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Skills)[1]', 'nvarchar(max)') AS [Skills] 
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Type)[1]', 'nvarchar(30)') AS [Addr.Type]
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Location/Location/Loc.CountryRegion)[1]', 'nvarchar(100)') AS [Addr.Loc.CountryRegion]
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Location/Location/Loc.State)[1]', 'nvarchar(100)') AS [Addr.Loc.State]
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Location/Location/Loc.City)[1]', 'nvarchar(100)') AS [Addr.Loc.City]
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.PostalCode)[1]', 'nvarchar(20)') AS [Addr.PostalCode]
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/EMail)[1]', 'nvarchar(max)') AS [EMail] 
    ,[Resume].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/WebSite)[1]', 'nvarchar(max)') AS [WebSite] 
    ,jc.[ModifiedDate] 
FROM [HumanResources].[JobCandidate] jc 
CROSS APPLY jc.[Resume].nodes(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
    /Resume') AS Resume(ref);
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.vJobCandidate') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Job candidate names and resumes.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vJobCandidate' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Job candidate names and resumes.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vJobCandidate' END;

-- changeset JamesBennett:1727463743285-144
CREATE VIEW HumanResources.vJobCandidateEducation AS SELECT 
    jc.[JobCandidateID] 
    ,[Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Level)[1]', 'nvarchar(max)') AS [Edu.Level]
    ,CONVERT(datetime, REPLACE([Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.StartDate)[1]', 'nvarchar(20)') ,'Z', ''), 101) AS [Edu.StartDate] 
    ,CONVERT(datetime, REPLACE([Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.EndDate)[1]', 'nvarchar(20)') ,'Z', ''), 101) AS [Edu.EndDate] 
    ,[Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Degree)[1]', 'nvarchar(50)') AS [Edu.Degree]
    ,[Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Major)[1]', 'nvarchar(50)') AS [Edu.Major]
    ,[Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Minor)[1]', 'nvarchar(50)') AS [Edu.Minor]
    ,[Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.GPA)[1]', 'nvarchar(5)') AS [Edu.GPA]
    ,[Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.GPAScale)[1]', 'nvarchar(5)') AS [Edu.GPAScale]
    ,[Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.School)[1]', 'nvarchar(100)') AS [Edu.School]
    ,[Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Location/Location/Loc.CountryRegion)[1]', 'nvarchar(100)') AS [Edu.Loc.CountryRegion]
    ,[Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Location/Location/Loc.State)[1]', 'nvarchar(100)') AS [Edu.Loc.State]
    ,[Education].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Location/Location/Loc.City)[1]', 'nvarchar(100)') AS [Edu.Loc.City]
FROM [HumanResources].[JobCandidate] jc 
CROSS APPLY jc.[Resume].nodes(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
    /Resume/Education') AS [Education](ref);
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.vJobCandidateEducation') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Displays the content from each education related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vJobCandidateEducation' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Displays the content from each education related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vJobCandidateEducation' END;

-- changeset JamesBennett:1727463743285-145
CREATE VIEW HumanResources.vJobCandidateEmployment AS SELECT 
    jc.[JobCandidateID] 
    ,CONVERT(datetime, REPLACE([Employment].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.StartDate)[1]', 'nvarchar(20)') ,'Z', ''), 101) AS [Emp.StartDate] 
    ,CONVERT(datetime, REPLACE([Employment].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.EndDate)[1]', 'nvarchar(20)') ,'Z', ''), 101) AS [Emp.EndDate] 
    ,[Employment].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.OrgName)[1]', 'nvarchar(100)') AS [Emp.OrgName]
    ,[Employment].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.JobTitle)[1]', 'nvarchar(100)') AS [Emp.JobTitle]
    ,[Employment].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Responsibility)[1]', 'nvarchar(max)') AS [Emp.Responsibility]
    ,[Employment].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.FunctionCategory)[1]', 'nvarchar(max)') AS [Emp.FunctionCategory]
    ,[Employment].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.IndustryCategory)[1]', 'nvarchar(max)') AS [Emp.IndustryCategory]
    ,[Employment].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Location/Location/Loc.CountryRegion)[1]', 'nvarchar(max)') AS [Emp.Loc.CountryRegion]
    ,[Employment].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Location/Location/Loc.State)[1]', 'nvarchar(max)') AS [Emp.Loc.State]
    ,[Employment].ref.value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Location/Location/Loc.City)[1]', 'nvarchar(max)') AS [Emp.Loc.City]
FROM [HumanResources].[JobCandidate] jc 
CROSS APPLY jc.[Resume].nodes(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
    /Resume/Employment') AS Employment(ref);
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('HumanResources.vJobCandidateEmployment') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Displays the content from each employement history related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vJobCandidateEmployment' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Displays the content from each employement history related element in the xml column Resume in the HumanResources.JobCandidate table. The content has been localized into French, Simplified Chinese and Thai. Some data may not display correctly unless supplemental language support is installed.' , @level0type = N'SCHEMA' , @level0name = N'HumanResources' , @level1type = N'VIEW' , @level1name = N'vJobCandidateEmployment' END;

-- changeset JamesBennett:1727463743285-146
CREATE UNIQUE NONCLUSTERED INDEX AK_Department_Name ON HumanResources.Department(Name);

-- changeset JamesBennett:1727463743285-147
CREATE UNIQUE NONCLUSTERED INDEX AK_Shift_Name ON HumanResources.Shift(Name);

-- changeset JamesBennett:1727463743285-148
CREATE UNIQUE NONCLUSTERED INDEX AK_Shift_StartTime_EndTime ON HumanResources.Shift(StartTime, EndTime);

-- changeset JamesBennett:1727463743285-149
ALTER TABLE HumanResources.EmployeeDepartmentHistory ADD CONSTRAINT CK_EmployeeDepartmentHistory_EndDate CHECK (([EndDate]>=[StartDate] OR [EndDate] IS NULL));

-- changeset JamesBennett:1727463743285-150
CREATE NONCLUSTERED INDEX IX_EmployeeDepartmentHistory_DepartmentID ON HumanResources.EmployeeDepartmentHistory(DepartmentID);

-- changeset JamesBennett:1727463743285-151
CREATE NONCLUSTERED INDEX IX_EmployeeDepartmentHistory_ShiftID ON HumanResources.EmployeeDepartmentHistory(ShiftID);

-- changeset JamesBennett:1727463743285-152
ALTER TABLE HumanResources.EmployeeDepartmentHistory ADD CONSTRAINT PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_DepartmentID PRIMARY KEY (BusinessEntityID, StartDate, DepartmentID, ShiftID);

-- changeset JamesBennett:1727463743285-153
ALTER TABLE HumanResources.EmployeePayHistory ADD CONSTRAINT CK_EmployeePayHistory_PayFrequency CHECK (([PayFrequency]=(2) OR [PayFrequency]=(1)));

-- changeset JamesBennett:1727463743285-154
ALTER TABLE HumanResources.EmployeePayHistory ADD CONSTRAINT CK_EmployeePayHistory_Rate CHECK (([Rate]>=(6.50) AND [Rate]<=(200.00)));

-- changeset JamesBennett:1727463743285-155
CREATE UNIQUE NONCLUSTERED INDEX AK_Address_rowguid ON Person.Address(rowguid);

-- changeset JamesBennett:1727463743285-156
CREATE UNIQUE NONCLUSTERED INDEX IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode ON Person.Address(AddressLine1, AddressLine2, City, StateProvinceID, PostalCode);

-- changeset JamesBennett:1727463743285-157
CREATE NONCLUSTERED INDEX IX_Address_StateProvinceID ON Person.Address(StateProvinceID);

-- changeset JamesBennett:1727463743285-158
CREATE UNIQUE NONCLUSTERED INDEX AK_BusinessEntityAddress_rowguid ON Person.BusinessEntityAddress(rowguid);

-- changeset JamesBennett:1727463743285-159
CREATE NONCLUSTERED INDEX IX_BusinessEntityAddress_AddressID ON Person.BusinessEntityAddress(AddressID);

-- changeset JamesBennett:1727463743285-160
CREATE NONCLUSTERED INDEX IX_BusinessEntityAddress_AddressTypeID ON Person.BusinessEntityAddress(AddressTypeID);

-- changeset JamesBennett:1727463743285-161
CREATE UNIQUE NONCLUSTERED INDEX AK_CountryRegion_Name ON Person.CountryRegion(Name);

-- changeset JamesBennett:1727463743285-162
CREATE VIEW [Person].[vStateProvinceCountryRegion] 
WITH SCHEMABINDING 
AS 
SELECT 
    sp.[StateProvinceID] 
    ,sp.[StateProvinceCode] 
    ,sp.[IsOnlyStateProvinceFlag] 
    ,sp.[Name] AS [StateProvinceName] 
    ,sp.[TerritoryID] 
    ,cr.[CountryRegionCode] 
    ,cr.[Name] AS [CountryRegionName]
FROM [Person].[StateProvince] sp 
    INNER JOIN [Person].[CountryRegion] cr 
    ON sp.[CountryRegionCode] = cr.[CountryRegionCode];
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Person.vStateProvinceCountryRegion') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Joins StateProvince table with CountryRegion table.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'VIEW' , @level1name = N'vStateProvinceCountryRegion' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Joins StateProvince table with CountryRegion table.' , @level0type = N'SCHEMA' , @level0name = N'Person' , @level1type = N'VIEW' , @level1name = N'vStateProvinceCountryRegion' END;

-- changeset JamesBennett:1727463743285-163
CREATE NONCLUSTERED INDEX IX_EmailAddress_EmailAddress ON Person.EmailAddress(EmailAddress);

-- changeset JamesBennett:1727463743285-164
CREATE NONCLUSTERED INDEX IX_PersonPhone_PhoneNumber ON Person.PersonPhone(PhoneNumber);

-- changeset JamesBennett:1727463743285-165
CREATE UNIQUE NONCLUSTERED INDEX AK_StateProvince_Name ON Person.StateProvince(Name);

-- changeset JamesBennett:1727463743285-166
CREATE UNIQUE NONCLUSTERED INDEX AK_StateProvince_rowguid ON Person.StateProvince(rowguid);

-- changeset JamesBennett:1727463743285-167
CREATE UNIQUE NONCLUSTERED INDEX AK_StateProvince_StateProvinceCode_CountryRegionCode ON Person.StateProvince(StateProvinceCode, CountryRegionCode);

-- changeset JamesBennett:1727463743285-168
CREATE UNIQUE NONCLUSTERED INDEX AK_AddressType_Name ON Person.AddressType(Name);

-- changeset JamesBennett:1727463743285-169
CREATE UNIQUE NONCLUSTERED INDEX AK_AddressType_rowguid ON Person.AddressType(rowguid);

-- changeset JamesBennett:1727463743285-170
CREATE UNIQUE NONCLUSTERED INDEX AK_BusinessEntity_rowguid ON Person.BusinessEntity(rowguid);

-- changeset JamesBennett:1727463743285-171
ALTER TABLE Production.ProductProductPhoto ADD CONSTRAINT PK_ProductProductPhoto_ProductID_ProductPhotoID PRIMARY KEY NONCLUSTERED (ProductID, ProductPhotoID);

-- changeset JamesBennett:1727463743285-172
CREATE UNIQUE NONCLUSTERED INDEX AK_Culture_Name ON Production.Culture(Name);

-- changeset JamesBennett:1727463743285-173
CREATE UNIQUE NONCLUSTERED INDEX AK_Document_DocumentLevel_DocumentNode ON Production.Document(DocumentLevel, DocumentNode);

-- changeset JamesBennett:1727463743285-174
ALTER TABLE Production.Document ADD CONSTRAINT CK_Document_Status CHECK (([Status]>=(1) AND [Status]<=(3)));

-- changeset JamesBennett:1727463743285-175
CREATE NONCLUSTERED INDEX IX_Document_FileName_Revision ON Production.Document(FileName, Revision);

-- changeset JamesBennett:1727463743285-176
ALTER TABLE Production.Document ADD CONSTRAINT UQ__Document__F73921F7C5112C2E UNIQUE (rowguid);

-- changeset JamesBennett:1727463743285-177
CREATE UNIQUE NONCLUSTERED INDEX AK_Location_Name ON Production.Location(Name);

-- changeset JamesBennett:1727463743285-178
ALTER TABLE Production.Location ADD CONSTRAINT CK_Location_Availability CHECK (([Availability]>=(0.00)));

-- changeset JamesBennett:1727463743285-179
ALTER TABLE Production.Location ADD CONSTRAINT CK_Location_CostRate CHECK (([CostRate]>=(0.00)));

-- changeset JamesBennett:1727463743285-180
CREATE UNIQUE NONCLUSTERED INDEX AK_ProductCategory_Name ON Production.ProductCategory(Name);

-- changeset JamesBennett:1727463743285-181
CREATE UNIQUE NONCLUSTERED INDEX AK_ProductCategory_rowguid ON Production.ProductCategory(rowguid);

-- changeset JamesBennett:1727463743285-182
CREATE UNIQUE NONCLUSTERED INDEX AK_ProductDescription_rowguid ON Production.ProductDescription(rowguid);

-- changeset JamesBennett:1727463743285-183
CREATE UNIQUE NONCLUSTERED INDEX AK_ProductModel_Name ON Production.ProductModel(Name);

-- changeset JamesBennett:1727463743285-184
CREATE UNIQUE NONCLUSTERED INDEX AK_ProductModel_rowguid ON Production.ProductModel(rowguid);

-- changeset JamesBennett:1727463743285-185
CREATE VIEW Production.vProductModelCatalogDescription AS SELECT 
    [ProductModelID] 
    ,[Name] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace html="http://www.w3.org/1999/xhtml"; 
        (/p1:ProductDescription/p1:Summary/html:p)[1]', 'nvarchar(max)') AS [Summary] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Manufacturer/p1:Name)[1]', 'nvarchar(max)') AS [Manufacturer] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Manufacturer/p1:Copyright)[1]', 'nvarchar(30)') AS [Copyright] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Manufacturer/p1:ProductURL)[1]', 'nvarchar(256)') AS [ProductURL] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Warranty/wm:WarrantyPeriod)[1]', 'nvarchar(256)') AS [WarrantyPeriod] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Warranty/wm:Description)[1]', 'nvarchar(256)') AS [WarrantyDescription] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Maintenance/wm:NoOfYears)[1]', 'nvarchar(256)') AS [NoOfYears] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Maintenance/wm:Description)[1]', 'nvarchar(256)') AS [MaintenanceDescription] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:wheel)[1]', 'nvarchar(256)') AS [Wheel] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:saddle)[1]', 'nvarchar(256)') AS [Saddle] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:pedal)[1]', 'nvarchar(256)') AS [Pedal] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:BikeFrame)[1]', 'nvarchar(max)') AS [BikeFrame] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:crankset)[1]', 'nvarchar(256)') AS [Crankset] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Picture/p1:Angle)[1]', 'nvarchar(256)') AS [PictureAngle] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Picture/p1:Size)[1]', 'nvarchar(256)') AS [PictureSize] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Picture/p1:ProductPhotoID)[1]', 'nvarchar(256)') AS [ProductPhotoID] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/Material)[1]', 'nvarchar(256)') AS [Material] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/Color)[1]', 'nvarchar(256)') AS [Color] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/ProductLine)[1]', 'nvarchar(256)') AS [ProductLine] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/Style)[1]', 'nvarchar(256)') AS [Style] 
    ,[CatalogDescription].value(N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/RiderExperience)[1]', 'nvarchar(1024)') AS [RiderExperience] 
    ,[rowguid] 
    ,[ModifiedDate]
FROM [Production].[ProductModel] 
WHERE [CatalogDescription] IS NOT NULL;
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.vProductModelCatalogDescription') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Displays the content from each element in the xml column CatalogDescription for each product in the Production.ProductModel table that has catalog data.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'VIEW' , @level1name = N'vProductModelCatalogDescription' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Displays the content from each element in the xml column CatalogDescription for each product in the Production.ProductModel table that has catalog data.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'VIEW' , @level1name = N'vProductModelCatalogDescription' END;

-- changeset JamesBennett:1727463743285-186
CREATE VIEW Production.vProductModelInstructions AS SELECT 
    [ProductModelID] 
    ,[Name] 
    ,[Instructions].value(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"; 
        (/root/text())[1]', 'nvarchar(max)') AS [Instructions] 
    ,[MfgInstructions].ref.value('@LocationID[1]', 'int') AS [LocationID] 
    ,[MfgInstructions].ref.value('@SetupHours[1]', 'decimal(9, 4)') AS [SetupHours] 
    ,[MfgInstructions].ref.value('@MachineHours[1]', 'decimal(9, 4)') AS [MachineHours] 
    ,[MfgInstructions].ref.value('@LaborHours[1]', 'decimal(9, 4)') AS [LaborHours] 
    ,[MfgInstructions].ref.value('@LotSize[1]', 'int') AS [LotSize] 
    ,[Steps].ref.value('string(.)[1]', 'nvarchar(1024)') AS [Step] 
    ,[rowguid] 
    ,[ModifiedDate]
FROM [Production].[ProductModel] 
CROSS APPLY [Instructions].nodes(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"; 
    /root/Location') MfgInstructions(ref)
CROSS APPLY [MfgInstructions].ref.nodes('declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"; 
    step') Steps(ref);
IF EXISTS(  SELECT extended_properties.value FROM sys.extended_properties WHERE major_id = OBJECT_ID('Production.vProductModelInstructions') AND name = N'MS_DESCRIPTION' AND minor_id = 0 ) BEGIN  EXEC sys.sp_updateextendedproperty @name = N'MS_Description' , @value = N'Displays the content from each element in the xml column Instructions for each product in the Production.ProductModel table that has manufacturing instructions.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'VIEW' , @level1name = N'vProductModelInstructions' END  ELSE  BEGIN  EXEC sys.sp_addextendedproperty @name = N'MS_Description' , @value = N'Displays the content from each element in the xml column Instructions for each product in the Production.ProductModel table that has manufacturing instructions.' , @level0type = N'SCHEMA' , @level0name = N'Production' , @level1type = N'VIEW' , @level1name = N'vProductModelInstructions' END;

-- changeset JamesBennett:1727463743285-187
CREATE UNIQUE NONCLUSTERED INDEX AK_ProductSubcategory_Name ON Production.ProductSubcategory(Name);

-- changeset JamesBennett:1727463743285-188
CREATE UNIQUE NONCLUSTERED INDEX AK_ProductSubcategory_rowguid ON Production.ProductSubcategory(rowguid);

-- changeset JamesBennett:1727463743285-189
CREATE UNIQUE NONCLUSTERED INDEX AK_ScrapReason_Name ON Production.ScrapReason(Name);

-- changeset JamesBennett:1727463743285-190
CREATE UNIQUE NONCLUSTERED INDEX AK_UnitMeasure_Name ON Production.UnitMeasure(Name);

-- changeset JamesBennett:1727463743285-191
ALTER TABLE Production.ProductReview ADD CONSTRAINT CK_ProductReview_Rating CHECK (([Rating]>=(1) AND [Rating]<=(5)));

-- changeset JamesBennett:1727463743285-192
CREATE NONCLUSTERED INDEX IX_ProductReview_ProductID_Name ON Production.ProductReview(ProductID, ReviewerName);

-- changeset JamesBennett:1727463743285-193
ALTER TABLE Production.TransactionHistory ADD CONSTRAINT CK_TransactionHistory_TransactionType CHECK ((upper([TransactionType])='P' OR upper([TransactionType])='S' OR upper([TransactionType])='W'));

-- changeset JamesBennett:1727463743285-194 splitStatements:true
if object_id('Production.iWorkOrder', 'tr') is null exec ('CREATE TRIGGER iWorkOrder on Production.WorkOrder after insert as begin select ''STUB'' END');
ALTER TRIGGER Production.[iWorkOrder] ON Production.[WorkOrder] 
AFTER INSERT AS 
BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO [Production].[TransactionHistory](
            [ProductID]
            ,[ReferenceOrderID]
            ,[TransactionType]
            ,[TransactionDate]
            ,[Quantity]
            ,[ActualCost])
        SELECT 
            inserted.[ProductID]
            ,inserted.[WorkOrderID]
            ,'W'
            ,GETDATE()
            ,inserted.[OrderQty]
            ,0
        FROM inserted;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

-- changeset JamesBennett:1727463743285-195
CREATE NONCLUSTERED INDEX IX_TransactionHistory_ProductID ON Production.TransactionHistory(ProductID);

-- changeset JamesBennett:1727463743285-196
CREATE NONCLUSTERED INDEX IX_TransactionHistory_ReferenceOrderID_ReferenceOrderLineID ON Production.TransactionHistory(ReferenceOrderID, ReferenceOrderLineID);

-- changeset JamesBennett:1727463743285-197 splitStatements:true
if object_id('Production.uWorkOrder', 'tr') is null exec ('CREATE TRIGGER uWorkOrder on Production.WorkOrder after insert as begin select ''STUB'' END');
ALTER TRIGGER Production.[uWorkOrder] ON Production.[WorkOrder] 
AFTER UPDATE AS 
BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        IF UPDATE([ProductID]) OR UPDATE([OrderQty])
        BEGIN
            INSERT INTO [Production].[TransactionHistory](
                [ProductID]
                ,[ReferenceOrderID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity])
            SELECT 
                inserted.[ProductID]
                ,inserted.[WorkOrderID]
                ,'W'
                ,GETDATE()
                ,inserted.[OrderQty]
            FROM inserted;
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

-- changeset JamesBennett:1727463743285-198 splitStatements:true
if object_id('Purchasing.iPurchaseOrderDetail', 'tr') is null exec ('CREATE TRIGGER iPurchaseOrderDetail on Purchasing.PurchaseOrderDetail after insert as begin select ''STUB'' END');
ALTER TRIGGER Purchasing.[iPurchaseOrderDetail] ON Purchasing.[PurchaseOrderDetail] 
AFTER INSERT AS
BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO [Production].[TransactionHistory]
            ([ProductID]
            ,[ReferenceOrderID]
            ,[ReferenceOrderLineID]
            ,[TransactionType]
            ,[TransactionDate]
            ,[Quantity]
            ,[ActualCost])
        SELECT 
            inserted.[ProductID]
            ,inserted.[PurchaseOrderID]
            ,inserted.[PurchaseOrderDetailID]
            ,'P'
            ,GETDATE()
            ,inserted.[OrderQty]
            ,inserted.[UnitPrice]
        FROM inserted 
            INNER JOIN [Purchasing].[PurchaseOrderHeader] 
            ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID];

        -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the 
        -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.
        UPDATE [Purchasing].[PurchaseOrderHeader]
        SET [Purchasing].[PurchaseOrderHeader].[SubTotal] = 
            (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])
                FROM [Purchasing].[PurchaseOrderDetail]
                WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])
        WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] IN (SELECT inserted.[PurchaseOrderID] FROM inserted);
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

-- changeset JamesBennett:1727463743285-199 splitStatements:true
if object_id('Purchasing.uPurchaseOrderDetail', 'tr') is null exec ('CREATE TRIGGER uPurchaseOrderDetail on Purchasing.PurchaseOrderDetail after insert as begin select ''STUB'' END');
ALTER TRIGGER Purchasing.[uPurchaseOrderDetail] ON Purchasing.[PurchaseOrderDetail] 
AFTER UPDATE AS 
BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        IF UPDATE([ProductID]) OR UPDATE([OrderQty]) OR UPDATE([UnitPrice])
        -- Insert record into TransactionHistory 
        BEGIN
            INSERT INTO [Production].[TransactionHistory]
                ([ProductID]
                ,[ReferenceOrderID]
                ,[ReferenceOrderLineID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity]
                ,[ActualCost])
            SELECT 
                inserted.[ProductID]
                ,inserted.[PurchaseOrderID]
                ,inserted.[PurchaseOrderDetailID]
                ,'P'
                ,GETDATE()
                ,inserted.[OrderQty]
                ,inserted.[UnitPrice]
            FROM inserted 
                INNER JOIN [Purchasing].[PurchaseOrderDetail] 
                ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID];

            -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the 
            -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.
            UPDATE [Purchasing].[PurchaseOrderHeader]
            SET [Purchasing].[PurchaseOrderHeader].[SubTotal] = 
                (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])
                    FROM [Purchasing].[PurchaseOrderDetail]
                    WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] 
                        = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])
            WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] 
                IN (SELECT inserted.[PurchaseOrderID] FROM inserted);

            UPDATE [Purchasing].[PurchaseOrderDetail]
            SET [Purchasing].[PurchaseOrderDetail].[ModifiedDate] = GETDATE()
            FROM inserted
            WHERE inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID]
                AND inserted.[PurchaseOrderDetailID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderDetailID];
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

-- changeset JamesBennett:1727463743285-200
ALTER TABLE Production.TransactionHistoryArchive ADD CONSTRAINT CK_TransactionHistoryArchive_TransactionType CHECK ((upper([TransactionType])='P' OR upper([TransactionType])='S' OR upper([TransactionType])='W'));

-- changeset JamesBennett:1727463743285-201
CREATE NONCLUSTERED INDEX IX_TransactionHistoryArchive_ProductID ON Production.TransactionHistoryArchive(ProductID);

-- changeset JamesBennett:1727463743285-202
CREATE NONCLUSTERED INDEX IX_TransactionHistoryArchive_ReferenceOrderID_ReferenceOrderLineID ON Production.TransactionHistoryArchive(ReferenceOrderID, ReferenceOrderLineID);

-- changeset JamesBennett:1727463743285-203
ALTER TABLE Production.WorkOrder ADD CONSTRAINT CK_WorkOrder_EndDate CHECK (([EndDate]>=[StartDate] OR [EndDate] IS NULL));

-- changeset JamesBennett:1727463743285-204
ALTER TABLE Production.WorkOrder ADD CONSTRAINT CK_WorkOrder_OrderQty CHECK (([OrderQty]>(0)));

-- changeset JamesBennett:1727463743285-205
ALTER TABLE Production.WorkOrder ADD CONSTRAINT CK_WorkOrder_ScrappedQty CHECK (([ScrappedQty]>=(0)));

-- changeset JamesBennett:1727463743285-206
CREATE NONCLUSTERED INDEX IX_WorkOrder_ProductID ON Production.WorkOrder(ProductID);

-- changeset JamesBennett:1727463743285-207
CREATE NONCLUSTERED INDEX IX_WorkOrder_ScrapReasonID ON Production.WorkOrder(ScrapReasonID);

-- changeset JamesBennett:1727463743285-208
ALTER TABLE Production.WorkOrderRouting ADD CONSTRAINT CK_WorkOrderRouting_ActualCost CHECK (([ActualCost]>(0.00)));

-- changeset JamesBennett:1727463743285-209
ALTER TABLE Production.WorkOrderRouting ADD CONSTRAINT CK_WorkOrderRouting_ActualEndDate CHECK (([ActualEndDate]>=[ActualStartDate] OR [ActualEndDate] IS NULL OR [ActualStartDate] IS NULL));

-- changeset JamesBennett:1727463743285-210
ALTER TABLE Production.WorkOrderRouting ADD CONSTRAINT CK_WorkOrderRouting_ActualResourceHrs CHECK (([ActualResourceHrs]>=(0.0000)));

-- changeset JamesBennett:1727463743285-211
ALTER TABLE Production.WorkOrderRouting ADD CONSTRAINT CK_WorkOrderRouting_PlannedCost CHECK (([PlannedCost]>(0.00)));

-- changeset JamesBennett:1727463743285-212
ALTER TABLE Production.WorkOrderRouting ADD CONSTRAINT CK_WorkOrderRouting_ScheduledEndDate CHECK (([ScheduledEndDate]>=[ScheduledStartDate]));

-- changeset JamesBennett:1727463743285-213
CREATE NONCLUSTERED INDEX IX_WorkOrderRouting_ProductID ON Production.WorkOrderRouting(ProductID);

-- changeset JamesBennett:1727463743285-214
CREATE UNIQUE NONCLUSTERED INDEX AK_ShipMethod_Name ON Purchasing.ShipMethod(Name);

-- changeset JamesBennett:1727463743285-215
CREATE UNIQUE NONCLUSTERED INDEX AK_ShipMethod_rowguid ON Purchasing.ShipMethod(rowguid);

-- changeset JamesBennett:1727463743285-216
ALTER TABLE Purchasing.ShipMethod ADD CONSTRAINT CK_ShipMethod_ShipBase CHECK (([ShipBase]>(0.00)));

-- changeset JamesBennett:1727463743285-217
ALTER TABLE Purchasing.ShipMethod ADD CONSTRAINT CK_ShipMethod_ShipRate CHECK (([ShipRate]>(0.00)));

-- changeset JamesBennett:1727463743285-218
ALTER TABLE Purchasing.ProductVendor ADD CONSTRAINT CK_ProductVendor_AverageLeadTime CHECK (([AverageLeadTime]>=(1)));

-- changeset JamesBennett:1727463743285-219
ALTER TABLE Purchasing.ProductVendor ADD CONSTRAINT CK_ProductVendor_LastReceiptCost CHECK (([LastReceiptCost]>(0.00)));

-- changeset JamesBennett:1727463743285-220
ALTER TABLE Purchasing.ProductVendor ADD CONSTRAINT CK_ProductVendor_MaxOrderQty CHECK (([MaxOrderQty]>=(1)));

-- changeset JamesBennett:1727463743285-221
ALTER TABLE Purchasing.ProductVendor ADD CONSTRAINT CK_ProductVendor_MinOrderQty CHECK (([MinOrderQty]>=(1)));

-- changeset JamesBennett:1727463743285-222
ALTER TABLE Purchasing.ProductVendor ADD CONSTRAINT CK_ProductVendor_OnOrderQty CHECK (([OnOrderQty]>=(0)));

-- changeset JamesBennett:1727463743285-223
ALTER TABLE Purchasing.ProductVendor ADD CONSTRAINT CK_ProductVendor_StandardPrice CHECK (([StandardPrice]>(0.00)));

-- changeset JamesBennett:1727463743285-224
CREATE NONCLUSTERED INDEX IX_ProductVendor_BusinessEntityID ON Purchasing.ProductVendor(BusinessEntityID);

-- changeset JamesBennett:1727463743285-225
CREATE NONCLUSTERED INDEX IX_ProductVendor_UnitMeasureCode ON Purchasing.ProductVendor(UnitMeasureCode);

-- changeset JamesBennett:1727463743285-226
ALTER TABLE Purchasing.PurchaseOrderDetail ADD CONSTRAINT CK_PurchaseOrderDetail_OrderQty CHECK (([OrderQty]>(0)));

-- changeset JamesBennett:1727463743285-227
ALTER TABLE Purchasing.PurchaseOrderDetail ADD CONSTRAINT CK_PurchaseOrderDetail_ReceivedQty CHECK (([ReceivedQty]>=(0.00)));

-- changeset JamesBennett:1727463743285-228
ALTER TABLE Purchasing.PurchaseOrderDetail ADD CONSTRAINT CK_PurchaseOrderDetail_RejectedQty CHECK (([RejectedQty]>=(0.00)));

-- changeset JamesBennett:1727463743285-229
ALTER TABLE Purchasing.PurchaseOrderDetail ADD CONSTRAINT CK_PurchaseOrderDetail_UnitPrice CHECK (([UnitPrice]>=(0.00)));

-- changeset JamesBennett:1727463743285-230
CREATE NONCLUSTERED INDEX IX_PurchaseOrderDetail_ProductID ON Purchasing.PurchaseOrderDetail(ProductID);

-- changeset JamesBennett:1727463743285-231
ALTER TABLE Purchasing.PurchaseOrderHeader ADD CONSTRAINT CK_PurchaseOrderHeader_Freight CHECK (([Freight]>=(0.00)));

-- changeset JamesBennett:1727463743285-232
ALTER TABLE Purchasing.PurchaseOrderHeader ADD CONSTRAINT CK_PurchaseOrderHeader_ShipDate CHECK (([ShipDate]>=[OrderDate] OR [ShipDate] IS NULL));

-- changeset JamesBennett:1727463743285-233
ALTER TABLE Purchasing.PurchaseOrderHeader ADD CONSTRAINT CK_PurchaseOrderHeader_Status CHECK (([Status]>=(1) AND [Status]<=(4)));

-- changeset JamesBennett:1727463743285-234
ALTER TABLE Purchasing.PurchaseOrderHeader ADD CONSTRAINT CK_PurchaseOrderHeader_SubTotal CHECK (([SubTotal]>=(0.00)));

-- changeset JamesBennett:1727463743285-235
ALTER TABLE Purchasing.PurchaseOrderHeader ADD CONSTRAINT CK_PurchaseOrderHeader_TaxAmt CHECK (([TaxAmt]>=(0.00)));

-- changeset JamesBennett:1727463743285-236
CREATE NONCLUSTERED INDEX IX_PurchaseOrderHeader_EmployeeID ON Purchasing.PurchaseOrderHeader(EmployeeID);

-- changeset JamesBennett:1727463743285-237
CREATE NONCLUSTERED INDEX IX_PurchaseOrderHeader_VendorID ON Purchasing.PurchaseOrderHeader(VendorID);

-- changeset JamesBennett:1727463743285-238 splitStatements:true
if object_id('Purchasing.uPurchaseOrderHeader', 'tr') is null exec ('CREATE TRIGGER uPurchaseOrderHeader on Purchasing.PurchaseOrderHeader after insert as begin select ''STUB'' END');
ALTER TRIGGER Purchasing.[uPurchaseOrderHeader] ON Purchasing.[PurchaseOrderHeader] 
AFTER UPDATE AS 
BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- Update RevisionNumber for modification of any field EXCEPT the Status.
        IF NOT UPDATE([Status])
        BEGIN
            UPDATE [Purchasing].[PurchaseOrderHeader]
            SET [Purchasing].[PurchaseOrderHeader].[RevisionNumber] = 
                [Purchasing].[PurchaseOrderHeader].[RevisionNumber] + 1
            WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] IN 
                (SELECT inserted.[PurchaseOrderID] FROM inserted);
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

-- changeset JamesBennett:1727463743285-239
CREATE UNIQUE NONCLUSTERED INDEX AK_CreditCard_CardNumber ON Sales.CreditCard(CardNumber);

-- changeset JamesBennett:1727463743285-240
CREATE UNIQUE NONCLUSTERED INDEX AK_Currency_Name ON Sales.Currency(Name);

-- changeset JamesBennett:1727463743285-241
CREATE UNIQUE NONCLUSTERED INDEX AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode ON Sales.CurrencyRate(CurrencyRateDate, FromCurrencyCode, ToCurrencyCode);

-- changeset JamesBennett:1727463743285-242
CREATE UNIQUE NONCLUSTERED INDEX AK_SalesOrderDetail_rowguid ON Sales.SalesOrderDetail(rowguid);

-- changeset JamesBennett:1727463743285-243
ALTER TABLE Sales.SalesOrderDetail ADD CONSTRAINT CK_SalesOrderDetail_OrderQty CHECK (([OrderQty]>(0)));

-- changeset JamesBennett:1727463743285-244
ALTER TABLE Sales.SalesOrderDetail ADD CONSTRAINT CK_SalesOrderDetail_UnitPrice CHECK (([UnitPrice]>=(0.00)));

-- changeset JamesBennett:1727463743285-245
ALTER TABLE Sales.SalesOrderDetail ADD CONSTRAINT CK_SalesOrderDetail_UnitPriceDiscount CHECK (([UnitPriceDiscount]>=(0.00)));

-- changeset JamesBennett:1727463743285-246
CREATE NONCLUSTERED INDEX IX_SalesOrderDetail_ProductID ON Sales.SalesOrderDetail(ProductID);

-- changeset JamesBennett:1727463743285-247
CREATE UNIQUE NONCLUSTERED INDEX AK_SalesOrderHeader_rowguid ON Sales.SalesOrderHeader(rowguid);

-- changeset JamesBennett:1727463743285-248
CREATE UNIQUE NONCLUSTERED INDEX AK_SalesOrderHeader_SalesOrderNumber ON Sales.SalesOrderHeader(SalesOrderNumber);

-- changeset JamesBennett:1727463743285-249
ALTER TABLE Sales.SalesOrderHeader ADD CONSTRAINT CK_SalesOrderHeader_DueDate CHECK (([DueDate]>=[OrderDate]));

-- changeset JamesBennett:1727463743285-250
ALTER TABLE Sales.SalesOrderHeader ADD CONSTRAINT CK_SalesOrderHeader_Freight CHECK (([Freight]>=(0.00)));

-- changeset JamesBennett:1727463743285-251
ALTER TABLE Sales.SalesOrderHeader ADD CONSTRAINT CK_SalesOrderHeader_ShipDate CHECK (([ShipDate]>=[OrderDate] OR [ShipDate] IS NULL));

-- changeset JamesBennett:1727463743285-252
ALTER TABLE Sales.SalesOrderHeader ADD CONSTRAINT CK_SalesOrderHeader_Status CHECK (([Status]>=(0) AND [Status]<=(8)));

-- changeset JamesBennett:1727463743285-253
ALTER TABLE Sales.SalesOrderHeader ADD CONSTRAINT CK_SalesOrderHeader_SubTotal CHECK (([SubTotal]>=(0.00)));

-- changeset JamesBennett:1727463743285-254
ALTER TABLE Sales.SalesOrderHeader ADD CONSTRAINT CK_SalesOrderHeader_TaxAmt CHECK (([TaxAmt]>=(0.00)));

-- changeset JamesBennett:1727463743285-255
CREATE NONCLUSTERED INDEX IX_SalesOrderHeader_CustomerID ON Sales.SalesOrderHeader(CustomerID);

-- changeset JamesBennett:1727463743285-256
CREATE NONCLUSTERED INDEX IX_SalesOrderHeader_SalesPersonID ON Sales.SalesOrderHeader(SalesPersonID);

-- changeset JamesBennett:1727463743285-257 splitStatements:true
if object_id('Sales.uSalesOrderHeader', 'tr') is null exec ('CREATE TRIGGER uSalesOrderHeader on Sales.SalesOrderHeader after insert as begin select ''STUB'' END');
ALTER TRIGGER Sales.[uSalesOrderHeader] ON Sales.[SalesOrderHeader] 
AFTER UPDATE NOT FOR REPLICATION AS 
BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- Update RevisionNumber for modification of any field EXCEPT the Status.
        IF NOT UPDATE([Status])
        BEGIN
            UPDATE [Sales].[SalesOrderHeader]
            SET [Sales].[SalesOrderHeader].[RevisionNumber] = 
                [Sales].[SalesOrderHeader].[RevisionNumber] + 1
            WHERE [Sales].[SalesOrderHeader].[SalesOrderID] IN 
                (SELECT inserted.[SalesOrderID] FROM inserted);
        END;

        -- Update the SalesPerson SalesYTD when SubTotal is updated
        IF UPDATE([SubTotal])
        BEGIN
            DECLARE @StartDate datetime,
                    @EndDate datetime

            SET @StartDate = [dbo].[ufnGetAccountingStartDate]();
            SET @EndDate = [dbo].[ufnGetAccountingEndDate]();

            UPDATE [Sales].[SalesPerson]
            SET [Sales].[SalesPerson].[SalesYTD] = 
                (SELECT SUM([Sales].[SalesOrderHeader].[SubTotal])
                FROM [Sales].[SalesOrderHeader] 
                WHERE [Sales].[SalesPerson].[BusinessEntityID] = [Sales].[SalesOrderHeader].[SalesPersonID]
                    AND ([Sales].[SalesOrderHeader].[Status] = 5) -- Shipped
                    AND [Sales].[SalesOrderHeader].[OrderDate] BETWEEN @StartDate AND @EndDate)
            WHERE [Sales].[SalesPerson].[BusinessEntityID] 
                IN (SELECT DISTINCT inserted.[SalesPersonID] FROM inserted 
                    WHERE inserted.[OrderDate] BETWEEN @StartDate AND @EndDate);

            -- Update the SalesTerritory SalesYTD when SubTotal is updated
            UPDATE [Sales].[SalesTerritory]
            SET [Sales].[SalesTerritory].[SalesYTD] = 
                (SELECT SUM([Sales].[SalesOrderHeader].[SubTotal])
                FROM [Sales].[SalesOrderHeader] 
                WHERE [Sales].[SalesTerritory].[TerritoryID] = [Sales].[SalesOrderHeader].[TerritoryID]
                    AND ([Sales].[SalesOrderHeader].[Status] = 5) -- Shipped
                    AND [Sales].[SalesOrderHeader].[OrderDate] BETWEEN @StartDate AND @EndDate)
            WHERE [Sales].[SalesTerritory].[TerritoryID] 
                IN (SELECT DISTINCT inserted.[TerritoryID] FROM inserted 
                    WHERE inserted.[OrderDate] BETWEEN @StartDate AND @EndDate);
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

-- changeset JamesBennett:1727463743285-258
CREATE UNIQUE NONCLUSTERED INDEX AK_SalesPerson_rowguid ON Sales.SalesPerson(rowguid);

-- changeset JamesBennett:1727463743285-259
ALTER TABLE Sales.SalesPerson ADD CONSTRAINT CK_SalesPerson_Bonus CHECK (([Bonus]>=(0.00)));

-- changeset JamesBennett:1727463743285-260
ALTER TABLE Sales.SalesPerson ADD CONSTRAINT CK_SalesPerson_CommissionPct CHECK (([CommissionPct]>=(0.00)));

-- changeset JamesBennett:1727463743285-261
ALTER TABLE Sales.SalesPerson ADD CONSTRAINT CK_SalesPerson_SalesLastYear CHECK (([SalesLastYear]>=(0.00)));

-- changeset JamesBennett:1727463743285-262
ALTER TABLE Sales.SalesPerson ADD CONSTRAINT CK_SalesPerson_SalesQuota CHECK (([SalesQuota]>(0.00)));

-- changeset JamesBennett:1727463743285-263
ALTER TABLE Sales.SalesPerson ADD CONSTRAINT CK_SalesPerson_SalesYTD CHECK (([SalesYTD]>=(0.00)));

-- changeset JamesBennett:1727463743285-264
CREATE UNIQUE NONCLUSTERED INDEX AK_SalesPersonQuotaHistory_rowguid ON Sales.SalesPersonQuotaHistory(rowguid);

-- changeset JamesBennett:1727463743285-265
ALTER TABLE Sales.SalesPersonQuotaHistory ADD CONSTRAINT CK_SalesPersonQuotaHistory_SalesQuota CHECK (([SalesQuota]>(0.00)));

-- changeset JamesBennett:1727463743285-266
CREATE UNIQUE NONCLUSTERED INDEX AK_SalesTaxRate_rowguid ON Sales.SalesTaxRate(rowguid);

-- changeset JamesBennett:1727463743285-267
CREATE UNIQUE NONCLUSTERED INDEX AK_SalesTaxRate_StateProvinceID_TaxType ON Sales.SalesTaxRate(StateProvinceID, TaxType);

-- changeset JamesBennett:1727463743285-268
ALTER TABLE Sales.SalesTaxRate ADD CONSTRAINT CK_SalesTaxRate_TaxType CHECK (([TaxType]>=(1) AND [TaxType]<=(3)));

-- changeset JamesBennett:1727463743285-269
CREATE UNIQUE NONCLUSTERED INDEX AK_SalesTerritory_Name ON Sales.SalesTerritory(Name);

-- changeset JamesBennett:1727463743285-270
CREATE UNIQUE NONCLUSTERED INDEX AK_SalesTerritory_rowguid ON Sales.SalesTerritory(rowguid);

-- changeset JamesBennett:1727463743285-271
ALTER TABLE Sales.SalesTerritory ADD CONSTRAINT CK_SalesTerritory_CostLastYear CHECK (([CostLastYear]>=(0.00)));

-- changeset JamesBennett:1727463743285-272
ALTER TABLE Sales.SalesTerritory ADD CONSTRAINT CK_SalesTerritory_CostYTD CHECK (([CostYTD]>=(0.00)));

-- changeset JamesBennett:1727463743285-273
ALTER TABLE Sales.SalesTerritory ADD CONSTRAINT CK_SalesTerritory_SalesLastYear CHECK (([SalesLastYear]>=(0.00)));

-- changeset JamesBennett:1727463743285-274
ALTER TABLE Sales.SalesTerritory ADD CONSTRAINT CK_SalesTerritory_SalesYTD CHECK (([SalesYTD]>=(0.00)));

-- changeset JamesBennett:1727463743285-275
CREATE UNIQUE NONCLUSTERED INDEX AK_SalesTerritoryHistory_rowguid ON Sales.SalesTerritoryHistory(rowguid);

-- changeset JamesBennett:1727463743285-276
ALTER TABLE Sales.SalesTerritoryHistory ADD CONSTRAINT CK_SalesTerritoryHistory_EndDate CHECK (([EndDate]>=[StartDate] OR [EndDate] IS NULL));

-- changeset JamesBennett:1727463743285-277
ALTER TABLE Sales.SalesTerritoryHistory ADD CONSTRAINT PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID PRIMARY KEY (BusinessEntityID, StartDate, TerritoryID);

-- changeset JamesBennett:1727463743285-278
CREATE UNIQUE NONCLUSTERED INDEX AK_SpecialOffer_rowguid ON Sales.SpecialOffer(rowguid);

-- changeset JamesBennett:1727463743285-279
ALTER TABLE Sales.SpecialOffer ADD CONSTRAINT CK_SpecialOffer_DiscountPct CHECK (([DiscountPct]>=(0.00)));

-- changeset JamesBennett:1727463743285-280
ALTER TABLE Sales.SpecialOffer ADD CONSTRAINT CK_SpecialOffer_EndDate CHECK (([EndDate]>=[StartDate]));

-- changeset JamesBennett:1727463743285-281
ALTER TABLE Sales.SpecialOffer ADD CONSTRAINT CK_SpecialOffer_MaxQty CHECK (([MaxQty]>=(0)));

-- changeset JamesBennett:1727463743285-282
ALTER TABLE Sales.SpecialOffer ADD CONSTRAINT CK_SpecialOffer_MinQty CHECK (([MinQty]>=(0)));

-- changeset JamesBennett:1727463743285-283
CREATE UNIQUE NONCLUSTERED INDEX AK_SpecialOfferProduct_rowguid ON Sales.SpecialOfferProduct(rowguid);

-- changeset JamesBennett:1727463743285-284
CREATE NONCLUSTERED INDEX IX_SpecialOfferProduct_ProductID ON Sales.SpecialOfferProduct(ProductID);

-- changeset JamesBennett:1727463743285-285
ALTER TABLE Sales.ShoppingCartItem ADD CONSTRAINT CK_ShoppingCartItem_Quantity CHECK (([Quantity]>=(1)));

-- changeset JamesBennett:1727463743285-286
CREATE NONCLUSTERED INDEX IX_ShoppingCartItem_ShoppingCartID_ProductID ON Sales.ShoppingCartItem(ShoppingCartID, ProductID);

-- changeset JamesBennett:1727463743285-287
CREATE NONCLUSTERED INDEX IX_CountryRegionCurrency_CurrencyCode ON Sales.CountryRegionCurrency(CurrencyCode);

-- changeset JamesBennett:1727463743285-288
CREATE UNIQUE CLUSTERED INDEX IX_vProductAndDescription ON Production.vProductAndDescription(CultureID, ProductID);

-- changeset JamesBennett:1727463743285-289
CREATE UNIQUE CLUSTERED INDEX IX_vStateProvinceCountryRegion ON Person.vStateProvinceCountryRegion(StateProvinceID, CountryRegionCode);

